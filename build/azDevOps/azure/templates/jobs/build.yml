parameters:
  pool:
      vmImage: 'ubuntu-latest'
  versionSpec: 12.x
  jobName: 'setMe'
  devops_artefact_name: 'DevOps'
  dependsOn: 'GetPackage'
  # Docker Config
  docker_build: true
  docker_build_additional_args: '.'
  docker_workdir: ''
  docker_imagename: ''
  docker_imagetag: ''
  docker_containerregistryname: ''
  # Vulnerability Scanning
  vulnerability_scan: false
  vulnerability_workdir: ''
  #  Static Code Analysis
  static_code_analysis: false
  static_code_analysis_build_path: ''
  Sonar_serviceConnection: ''
  Sonar_organization: ''
  Sonar_scannerMode: ''
  Sonar_projectKey: ''
  Sonar_projectName: ''
  Sonar_projectVersion: ''
  # Testing
  unit_test: false
  unit_test_command: 'npm run unit_test'
  unit_test_project: ''
  component_test: false
  component_test_project: ''
  integration_test: false
  integration_test_project: ''
  integration_test_cosmosdb_secret: false
  integration_test_cosmosdb_account: ''
  integration_test_cosmosdb_database: ''
  contract_test: false
  contract_test_project: ''
  functional_test: false
  functional_test_path: ''
  functional_test_artefact: ''
  # Build File Output
  build_file: false
  build_on_server: false
  build_file_path: ''
  build_file_artefact: ''
  # build output defaults 
  git_do_tag_release: false
  git_release_tag: ''
  publish_packages_lerna: false
  lerna_rootDir: ''
  lerna_command: ''

jobs:
- job: ${{ parameters.jobName }}
  dependsOn: ${{ parameters.dependsOn }}
  pool: ${{ parameters.pool }}
  continueOnError: false
  steps:
  - checkout: self
    persistCredentials: true
# Get DevOps Artefact and Install Prerequisites
  - template: azDevOps/azure/templates/steps/build-consume-devops.yml@templates

# Login to Azure/AKS
  - template: azDevOps/azure/templates/steps/login-services.yml@templates
    parameters:
      # Azure
      login_azure: true
      azure_tenant_id: '$(azure_tenant_id)'
      azure_subscription_id: '$(azure_subscription_id)'
      azure_client_id: '$(azure_client_id)'
      azure_client_secret: '$(azure_client_secret)'
      # Kubernetes
      login_kubernetes: false
        # aks_rg: ''
        # aks_clustername: ''
      devops_artefact_name: '${{ parameters.devops_artefact_name }}'


# Unit Test
  - ${{ if eq(parameters.unit_test, true) }}:
    - task: Npm@1
      displayName: 'Test: Install Dev Dependencies'
      inputs:
        command: 'install' # Options: install, publish, custom
        workingDir: ${{ parameters.projectRootDir }}
        verbose: false
        customRegistry: 'useNpmrc'
    
    - task: NodeTool@0
      displayName: 'Test: Unit tests'
      inputs:
        versionSpec: ${{ parameters.versionSpec }}
    - script: |
        ${{ parameters.unit_test_command }}
      displayName: 'Unit Test: Running Command'
      workingDirectory: ${{ parameters.projectRootDir }}

# SonarCloud Start
    #     docker run -e SONAR_HOST_URL=https://sonarcloud.io -e SONAR_TOKEN=$SONAR_TOKEN -e SONAR_PROJECT_KEY=$SONAR_PROJECT_KEY -e SONAR_PROJECT_KEY=$SONAR_PROJECT_KEY -e BUILD_NUMBER=${{ parameters.docker_imagetag }} -e SONAR_ORGANIZATION=$SONAR_ORGANIZATION -t --rm -v $(pwd):/usr/src sonarsource/sonar-scanner-cli
  - ${{ if eq(parameters.static_code_analysis, true) }}:
    # - task: SonarSource.sonarqube.15B84CA1-B62F-4A2A-A403-89B77A063157.SonarQubePrepare@4
    - bash: | 
        set -x
        echo $(pwd)
        echo $(env)
        ls
        sonar-scanner
      displayName: 'Prepare analysis on SonarQube'
      target: 
        container: sonar_scanner
      env: 
        SONAR_HOST_URL: https://sonarcloud.io
        SONAR_TOKEN: $SONAR_TOKEN
        SONAR_PROJECT_KEY: $SONAR_PROJECT_KEY
        SONAR_ORGANIZATION: $SONAR_ORGANIZATION
        BUILD_NUMBER: 1.2.=4
      inputs:
        workingDirectory: ${{ parameters.projectRootDir }}


# SonarCloud Results
#  - ${{ if eq(parameters.static_code_analysis, true) }}:
#    - task: SonarCloudAnalyze@1
#      displayName: 'SonarCloud: Analysis'
#
#    - task: SonarCloudPublish@1
#      inputs:
#        pollingTimeoutSec: '300'
#      displayName: 'SonarCloud: Publish'
# STEP build NPM for Azure registry 
  - ${{ if eq(parameters.build_on_server, true) }}:
    - task: Npm@1
      displayName: Build on ADO using custom feeds
      inputs:
        command: 'install' # Options: install, publish, custom
        workingDir: ${{ parameters.projectRootDir }}
        customRegistry: 'useNpmrc'

# Build Docker Image, Scan and Push to Repository
  - ${{ if eq(parameters.docker_build, true) }}:
    - bash: |
        docker build ${{ parameters.docker_build_additional_args }} -t ${{ parameters.docker_imagename }}:${{ parameters.docker_imagetag }} -t ${{ parameters.docker_containerregistryname }}.azurecr.io/${{ parameters.docker_imagename }}:${{ parameters.docker_imagetag }} -t ${{ parameters.docker_containerregistryname }}.azurecr.io/${{ parameters.docker_imagename }}:latest
      displayName: Build Container Image
      workingDirectory: ${{ parameters.docker_workdir }}
    
    - bash: |
        az acr login --name ${{ parameters.docker_containerregistryname }} # this is super annoying
        docker push ${{ parameters.docker_containerregistryname }}.azurecr.io/${{ parameters.docker_imagename }}
      displayName: Push Container Image to Azure Container Registry
      workingDirectory: ${{ parameters.docker_workdir }}

    # - template: azDevOps/azure/templates/steps/build-docker-build-and-scan.yml@templates
    #   parameters:
    #     devops_artefact_name: '{{ parameters.devops_artefact_name }}'
    #     # Docker
    #     docker_workdir: '${{ parameters.docker_workdir }}'
    #     docker_imagename: '${{ parameters.docker_imagename }}'
    #     docker_imagetag: '${{ parameters.docker_imagetag }}'
    #     docker_containerregistryname: '${{ parameters.docker_containerregistryname }}'
    #     # Vulnerability Scanning
    #     vulnerability_scan: '${{ parameters.vulnerability_scan }}'
    #     vulnerability_workdir: '${{ parameters.vulnerability_workdir }}'

# Build Docker Image, Scan and Push to Repository
  - ${{ if eq(parameters.git_do_tag_release, true) }}:
    - bash: |
       git config --global user.email "williamayerst@github.com"
       git config --global user.name "williamayerst"
       git tag -a v${{ parameters.git_release_tag }} -m "CI generate"
       git push origin v${{ parameters.git_release_tag }}
      displayName: Git Tag release
      workingDirectory: ${{ parameters.projectRootDir }}
# Do Lerna release
  - ${{ if eq(parameters.publish_packages_lerna, true) }}:
    - bash: |
        ${{ parameters.lerna_command }} 
      displayName: Lerna Publish
      workingDirectory: ${{ parameters.lerna_rootDir }}

# Publish Artefacts if required

  - ${{ if eq(parameters.functional_test, true) }}:
    - task: PublishBuildArtifacts@1
      displayName: 'Publish: Functional Tests Artifact'
      inputs:
        PathtoPublish: '${{ parameters.functional_test_path }}'
        ArtifactName: '${{ parameters.functional_test_artefact }}'

  - ${{ if eq(parameters.build_file, true) }}:
    - task: PublishBuildArtifacts@1
      displayName: 'Publish: Build Artefacts'
      inputs:
        PathtoPublish: '${{ parameters.build_file_path }}'
        ArtifactName: '${{ parameters.build_file_artefact }}'
