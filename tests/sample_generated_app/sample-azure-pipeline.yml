name: $(build.SourceBranchName)-init

trigger:
  branches:
    include:
    - "*"
  paths:
    include:
    - deploy/*
    - packages/*
    - build/azDevOps/azure/web-app-ci_cd.yml

pr:
- master
###### PART OF AMIDO-STACKS
resources:
  repositories:
  - repository: templates
    type: github
    name: amido/stacks-pipeline-templates
    ref: refs/tags/v1.0.0
    endpoint: amidostacks

########## PART OF TEMPLATE
  containers:
  - container: sonar_scanner
    image: dnitsch/build-server-stacks-webapp:0.0.2 # container with su -


variables:
# Global Config:
- name: Global.Company
  value: 'amido'
- name: Global.Project
  value: 'stacks'
- name: Global.Domain
  value: 'webapp'

# Versioning
- name: Version.Major
  value: 0
- name: Version.Minor
  value: 0
- name: Version.Revision
  value: $[counter(variables['Version.Minor'], 0)]

# Tests
# TODO: Calculate and devolve these into build template where feasible as parameters
- group: amido-stacks-testing

#TODO: convert below to variable group
- name: Sonar.serviceConnection
  value: 'amido-sonarcloud'
- name: Sonar.organization
  value: 'amido'
- name: Sonar.scannerMode
  value: 'MSBuild'
- name: Sonar.projectKey
  value: 'stacks-webapp-template'
- name: Sonar.projectName
  value: '$(Docker.ImageName)'
- name: Sonar.projectVersion
  value: '$(Docker.ImageTag)'

# Release Notes
- name: ReleaseNote.TargetName
  value: '$(Docker.ImageName)/$(Build.BuildNumber).json'
- name: ReleaseNote.StorageAccountRG
  value: 'amido-stacks-rg-uks-prod'
- name: ReleaseNote.StorageAccountName
  value: 'amidostacksuksprod'
- name: ReleaseNote.StorageContainerName
  value: 'releasenotes'
- name: ReleaseNote.GitHubProject
  value: 'stacks-dotnet'

# SonarCloud Info
- name: Test.sonarProjectKey
  value: 'stacks-webapp-template'

# Pact Broker Info
- name: Test.PactBrokerUrl
  value: 'https://amido-stacks.pact.dius.com.au'
# Specific Pact Contract Test Variables as ENV VAR
- name: BROKER_URL
  value: '$(Test.PactBrokerUrl)'
- name: BUILD_NUMBER
  value: '$(Docker.ImageTag)'
- name: BROKER_TOKEN
  value: '$(Test.PactBearerToken)'

# Docker Config
- name: Docker.DockerfilePath
  value: 'src/'
- name: Docker.ImageName
  value: 'stacks-webapp'
- name: Docker.ImageTag
  value: '$(Version.Major).$(Version.Minor).$(Version.Revision)-$(build.sourcebranchname)'
# value: '0.0.1-stacks-migration-2'

# DevOps Scripts Package Info
- name: DevOps.File
  value: 'scripts-1.2.84-master.tar.gz'
- name: DevOps.Container
  value: 'packages'
- name: DevOps.storageAccount
  value: 'amidostacksuksdev'
- name: DevOps.RG
  value: 'amido-stacks-rg-uks-dev'
- name: DevOps.ArtefactName
  value: 'DevOps'

stages:
- stage: Build
  variables:
  - group: amido-stacks-infra-credentials-nonprod
  - group: amido-stacks-webapp
  - name: Docker.ContainerRegistryName
    value: 'amidouksstacksacrdev'
  jobs:
  # Set build number
  - template: azDevOps/azure/templates/jobs/build-updatebuildnumber.yml@templates
    parameters:
      pool:
        vmImage: ubuntu-18.04
      build_number: $(Docker.ImageTag)

  # Retrieve a blob file with only Azure credentials, extract it and publish as an artefact
  - template: azDevOps/azure/templates/jobs/publish-blob-as-artefact.yml@templates
    parameters:
      pool:
        vmImage: 'ubuntu-latest'
      dependsOn: UpdateBuildNumber
      Package_RG: $(DevOps.RG)
      Package_storageAccount: $(DevOps.storageAccount)
      Package_Container: $(DevOps.Container)
      Package_File: $(DevOps.File)
      Package_OutputFolder: $(Build.BinariesDirectory)
      Package_OutputArtefact: '$(DevOps.ArtefactName)'

  # BUILD NPM
  # TODO: change this to steps and feed upstream
  - template: templates/jobs/build.yml
    parameters:
      pool:
        vmImage: ubuntu-18.04
      jobName: 'WebAppBuild'
      dependsOn: GetPackage # Name of 'publish-blob-as-artefact' step above
      devops_artefact_name: '$(DevOps.ArtefactName)'
      # Docker Config
      build_on_server: true
      docker_build: true
      # TODO: normalize this
      docker_build_additional_args: '../ -f ./Dockerfile'
      docker_workdir: '$(Build.SourcesDirectory)/packages/webapp/'
      docker_imagename: '$(Docker.ImageName)'
      docker_imagetag: $(Docker.ImageTag)
      docker_containerregistryname: '$(Docker.ContainerRegistryName)'
      # Vulnerability Scanning
      vulnerability_scan: false
      vulnerability_workdir: '$(Build.ArtifactStagingDirectory)'
      # Sonar settings
      static_code_analysis: false
      sonar_container: sonar_scanner
      # Should be hardcoded in your sonar-project.properties file
      # sonar_project_name: amido-stacks-webapp
      # Testing again
      unit_test: true
      projectRootDir: $(Build.SourcesDirectory)/packages/webapp
      unit_test_command: npm run test_ci # using npm run $@
      # unit_test_command: npx jest -c jest.config.js --rootDir . # using npm run $@
      unit_test_project: '$(Test.UnitTestProjectPath)'
      component_test: false
      component_test_project: '$(Test.ComponentTestProjectPath)'
      # Build Output File
      build_file: false
      build_file_path: '$(Build.SourcesDirectory)/deploy/k8s/cron_gdpr_scheduler'
      build_file_artefact: 'webapp_template_build'
      # Git Tag release
      git_do_tag_release: false
      git_release_tag: '$(Version.Major).$(Version.Minor).$(Version.Revision)-$(build.sourcebranchname)'
