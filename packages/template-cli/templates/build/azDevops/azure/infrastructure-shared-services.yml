name: '$(build.sourcebranchname)-init'

trigger:
  branches:
    include:
    - "*"
  paths:
    include:
    # Amido Testing pipeline for E2E output of the CLI
    - packages/template-cli/templates/build/*
    - packages/template-cli/templates/deploy/*

###### PART OF AMIDO-STACKS
resources:
  repositories:
  - repository: templates
    type: github
    name: amido/stacks-pipeline-templates
    ref: refs/tags/v1.0.0
    endpoint: williamayerst

  containers:
  - container: k8s_deploy
    image: dnitsch/ci-k8s-deploy:0.0.2
  - container: terraform_custom
    image: dnitsch/ci-tf:0.12.17

variables:
  company: amido
  project: stacks
  domain: webapp
  # Versioning
  version_major: 0
  version_minor: 0
  version_revision: $[counter(variables['version_minor'], 0)]
  # Docker Config
  docker_dockerfile_path: 'src/'
  docker_image_name: stacks-webapp
  docker_image_tag: '$(version_major).$(version_minor).$(version_revision)-$(build.sourcebranchname)'
  docker_container_registry_name: amidouksstacksacrdev
  # DEFAULT IMAGE RUNNER
  pool_vm_image: ubuntu-18.04
  # Test setup
  deployed_base_url: https://stacks-webapp.com/foo

stages:
- stage: nonprod
  variables:
  - group: amido-stacks-infra-credentials-nonprod
  - group: amido-stacks-webapp
  jobs:
  - job: DeployNonProd
    # container: 
    #   image: dnitsch/ci-tf:0.12.17
    #   env: 
    #     ARM_SUBSCRIPTION_ID: $(azure_subscription_id)
    #     ARM_CLIENT_ID: $(azure_client_id)
    #     ARM_CLIENT_SECRET: $(azure_client_secret)
    #     ARM_TENANT_ID: $(azure_tenant_id)
    variables:
      foo: bar 
    pool:
      vmImage: ubuntu-18.04
    steps:
      - checkout: self
        persistCredentials: true
        env:
          ARM_SUBSCRIPTION_ID: $(azure_subscription_id)
          ARM_CLIENT_ID: $(azure_client_id)
          ARM_CLIENT_SECRET: $(azure_client_secret)
          ARM_TENANT_ID: $(azure_tenant_id)
        target: terraform_custom
      # Create TF infra
      - template: templates/v2/steps/deploy-terraform-resource.yml
        parameters: 
          # Terraform Basic Config
          terraform_working_dir: '$(Build.SourcesDirectory)/packages/template-cli/templates/deploy/azure/ssr'
          terraform_output_artefact: 'tfoutputs'
          # Terraform State Config
          terraform_backend_client_id: $(azure_client_id)
          terraform_backend_client_secret: $(azure_client_secret)
          terraform_backend_tenant_id: $(azure_tenant_id)
          terraform_backend_subscription_id: $(azure_subscription_id)
          terraform_state_rg: 'amido-stacks-rg-uks'
          terraform_state_storage: 'amidostackstfstategbl'
          terraform_state_container: 'tfstate'
          terraform_state_key: 'test-from-scratch'
          terraform_state_workspace: 'dev'
          # Global Config
          company: 'amido'
          project: 'stacks'
          environment: ''
          azure_cli_providers: [
            { name: MSIPreview, namespace: Microsoft.ContainerService }
          ]
          # Azure config
          tags: ''
          # Terraform Resource Specific Config
          terraform_extra_properties: {
            TF_VAR_client_secret: $(azure_client_secret),
            TF_VAR_tenant_id: $(azure_tenant_id),
            TF_VAR_resource_group_location: uksouth,
            TF_VAR_name_company: amido,
            TF_VAR_name_project: stacks,
            TF_VAR_name_component: cycle2,
            TF_VAR_name_environment: dev,
            TF_VAR_stage: dev
          }
          terraform_output_commands: ''

            # deploy AKS 
            
            # do any other steps in between 
            # - template: azDevOps/azure/templates/jobs/deploy-aks.yml@templates
            #   parameters:
            #     environment: $(environment)
            #     terraform_artefact_name: 'terraform'
            #     terraform_output_artefact: 'tfoutputs'
            #     devops_artefact_name: 'DevOps'
            #     # Terraform State Config (Must already exist!)
            #     terraform_state_rg: $(Terraform.stateRG)
            #     terraform_state_storage: $(Terraform.stateStorageAccount)
            #     terraform_state_container: $(Terraform.stateStorageContainer)
            #     terraform_state_key: $(Terraform.stateKey)
            #     terraform_state_workspace: $(Terraform.stateWorkspace)
            #     # Global Config
            #     company: $(Global.company)
            #     project: $(Global.project)
            #     # Azure Config
            #     location: $(Azure.location)
            #     tags: $(Azure.tags)
            #     # DNS Config
            #     DNS_create: true
            #     DNS_zone: $(environment).$(Global.DNSsuffix)
            #     # Cluster Config
            #     Cluster_version: $(Kubernetes.ClusterVersion)
            #     Cluster_nodeCount: $(Kubernetes.ClusterNodeCount)
            #     Cluster_nodeSize: $(Kubernetes.ClusterNodeSize)
            #     Cluster_spn_create: false
            #     # Ingress Configuration
            #     IngressNamespace: 'ingress-nginx' # We are deploying ingress/ssl cert in same namespace
            #     # SSL Configuration
            #     DefaultCertImportfromBlob: true
            #     ## If above it set to true, define the following values:
            #     BlobCertTLSkeyfile: 'star_amidostacks_com.key'
            #     BlobCertTLScrtfile: 'star_amidostacks_com.pem'
            #     BlobCertCAfile: 'star_amidostacks_com.ca-bundle'
            #     DefaultCertSecretNameSpace: 'ingress-nginx'
            #     DefaultCertSecretName: 'wildcard-amidostacks-com'
            #     BlobCertRG: 'amido-stacks-rg-uks-prod'
            #     BlobCertStorageAccount: 'amidostacksuksprod'
            #     BlobCertStorageContainer: 'certificates'
