#############################################################################################################################
# This is a generated file which includes some replacements.                                                                #
# It is still very much recommended to go through this and ensure all variables are correct for your business/domain        #
# All variables are defined in a global scope.                                                                              #
# All Terraform produced resource names are using a labels module ensuring a predictable naming convention                  #
# E.g.: variables for company, project, stage and component will produce a name of `$company-$project-$stage-$componenet`   #
# NB: Some resources e.g. blob storage only allow for alpha numeric characters so the name is adjusted accordingly          #
#  ==> `$company$project$stage$componenet`                                                                                  #
#############################################################################################################################
name: '$(build.sourcebranchname)-init'

pr: none
trigger:
  branches:
    include:
    - "*"
  paths:
    include:
    # Amido Testing pipeline for E2E output of the CLI
    - packages/template-cli/templates/build/*
    - packages/template-cli/templates/deploy/*

resources:
  repositories:
  - repository: templates
    type: github
    name: amido/stacks-pipeline-templates
    ref: feature/cycle2
    endpoint: amidostacks

  containers:
  - container: k8s_deploy
    image: amidostacks/ci-k8s:0.0.1
  - container: terraform_custom
    image: amidostacks/ci-tf:0.0.2

variables:
  company: amido
  project: stacks
  domain: webapp
  component: cycle2
  # Versioning
  version_major: 0
  version_minor: 0
  version_revision: $[counter(variables['version_minor'], 0)]
  # SelfConfig
  self_repo: stacks-webapp-template/packages/template-cli/templates
  self_repo_tf_src: deploy/azure/ssr
  # Docker Config
  docker_dockerfile_path: 'src/'
  docker_image_name: stacks-webapp
  docker_image_tag: '$(version_major).$(version_minor).$(version_revision)-$(build.sourcebranchname)'
  docker_container_registry_name: amidouksstacksacrdev
  # AKS/AZURE
  aks_clusterrg_nonprod: amido-stacks-dev-cycle2
  aks_clustername_nonprod: amido-stacks-dev-cycle2
  aks_dns_resource_group_name_nonprod: amido-stacks-dev-cycle2
  # DEFAULT IMAGE RUNNER
  pool_vm_image: ubuntu-18.04
  # Test setup
  deployed_base_url: https://stacks-webapp.com/foo

stages:
- stage: nonprod
  variables:
  - group: amido-stacks-infra-credentials-nonprod
  - group: amido-stacks-webapp
  jobs:
  - job: InfraNonProd
    variables:
      foo: bar 
    pool:
      vmImage: ubuntu-18.04
    steps:
      - checkout: self
      - checkout: templates
        persistCredentials: true
        env:
          ARM_SUBSCRIPTION_ID: $(azure_subscription_id)
          ARM_CLIENT_ID: $(azure_client_id)
          ARM_CLIENT_SECRET: $(azure_client_secret)
          ARM_TENANT_ID: $(azure_tenant_id)
        target: terraform_custom
      # Create TF infra
      - template: azDevOps/azure/templates/v2/steps/deploy-terraform-resource.yml@templates
        parameters: 
          # Terraform Basic Config
          terraform_working_dir: '$(Agent.BuildDirectory)/s/$(self_repo)/$(self_repo_tf_src)'
          terraform_output_artefact: 'tfoutputs'
          # Terraform State Config
          terraform_backend_client_id: $(azure_client_id)
          terraform_backend_client_secret: $(azure_client_secret)
          terraform_backend_tenant_id: $(azure_tenant_id)
          terraform_backend_subscription_id: $(azure_subscription_id)
          terraform_state_rg: 'amido-stacks-rg-uks'
          terraform_state_storage: 'amidostackstfstategbl'
          terraform_state_container: 'tfstate'
          terraform_state_key: 'test-from-scratch'
          terraform_state_workspace: 'dev'
          # Global Config
          company: 'amido'
          project: 'stacks'
          environment: ''
          azure_cli_providers: [
            { name: MSIPreview, namespace: Microsoft.ContainerService }
          ]
          # Azure config
          tags: ''
          # Terraform Resource Specific Config
          terraform_extra_properties: {
            TF_VAR_client_secret: $(azure_client_secret),
            TF_VAR_tenant_id: $(azure_tenant_id),
            TF_VAR_resource_group_location: uksouth,
            TF_VAR_name_company: $(company),
            TF_VAR_name_project: $(project),
            TF_VAR_name_component: $(component),
            TF_VAR_name_environment: dev,
            TF_VAR_stage: dev
          }
          terraform_output_commands: ''
  - job: K8sNonProd
    dependsOn: "InfraNonProd"
    variables:
      foo: bar
    pool:
      vmImage: ubuntu-18.04
    steps:
      - checkout: self
      - checkout: templates
        persistCredentials: true
        env:
          ARM_SUBSCRIPTION_ID: $(azure_subscription_id)
          ARM_CLIENT_ID: $(azure_client_id)
          ARM_CLIENT_SECRET: $(azure_client_secret)
          ARM_TENANT_ID: $(azure_tenant_id)
        target: k8s_deploy
        # ensure scripts are executable
      - template: azDevOps/azure/templates/v2/steps/aux-k8s-scripts.yml@templates
        parameters:
          scripts_dir: $(Agent.BuildDirectory)/s/stacks-pipeline-templates/azDevOps/azure/templates/v2

      - template: azDevOps/azure/templates/v2/steps/deploy-k8s-cluster.yml@templates
        parameters: 
          aks_cluster_name: $(aks_clusterrg_nonprod)
          aks_resource_group_name: $(aks_clusterrg_nonprod)
          aks_dns_resource_group_name: amido-stacks-dev-cycle2
          aks_set_acr_perms: true
          acr_name: amidostacksdevcycle2
          acr_resource_group_name: amido-stacks-dev-cycle2
          ingress_definition:
            # TODO: make this a complex object so that additional args can be passed in 
            - 'https://raw.githubusercontent.com/kubernetes/ingress-nginx/nginx-0.29.0/deploy/static/mandatory.yaml'
            - 'https://raw.githubusercontent.com/kubernetes/ingress-nginx/nginx-0.29.0/deploy/static/provider/cloud-generic.yaml'
          scripts_dir: $(Agent.BuildDirectory)/s/stacks-pipeline-templates/azDevOps/azure/templates/v2/scripts
          base_external_dns_yml: $(Agent.BuildDirectory)/s/$(self_repo)/build/azDevops/azure/k8s_manifests/base_external-dns.yml
          external_dns_yml: $(Agent.BuildDirectory)/s/$(self_repo)/build/azDevops/azure/k8s_manifests/external-dns.yml
