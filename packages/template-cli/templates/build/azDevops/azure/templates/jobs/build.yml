parameters:
  pool:
    vmImage: 'ubuntu-latest'
  versionSpec: 12.x
  project_root_dir: ''
  jobName: 'setMe'
  devops_artefact_name: 'DevOps'
  dependsOn: 'GetPackage'
  # Docker Config
  docker_build: true
  docker_build_additional_args: ''
  docker_workdir: ''
  docker_imagename: ''
  docker_imagetag: ''
  docker_containerregistryname: ''
  # Vulnerability Scanning
  vulnerability_scan: false
  vulnerability_workdir: ''
  #  Static Code Analysis
  build_audit: false
  static_code_analysis: false
  static_code_analysis_build_path: ''
  Sonar_serviceConnection: ''
  Sonar_organization: ''
  Sonar_scannerMode: ''
  Sonar_projectKey: ''
  Sonar_projectName: ''
  Sonar_projectVersion: ''
  #Linting and formatting validation
  lint_formatting: ''
  shared_eslint_config: ''
  # Testing
  unit_test: true
  contract_test: true
  contract_check_can_deploy: false
  e2e_test: true
  # Build File Output
  build_file: false
  build_on_server: false
  build_file_path: ''
  build_file_artefact: ''
  # build output defaults 
  git_do_tag_release: false
  git_release_tag: ''

jobs:
  - job: ${{ parameters.jobName }}
    dependsOn: ${{ parameters.dependsOn }}
    pool: ${{ parameters.pool }}
    continueOnError: false
    steps:
      - checkout: self
        persistCredentials: true
      # Get DevOps Artefact and Install Prerequisites
      - template: azDevOps/azure/templates/steps/build-consume-devops.yml@templates

      # Login to Azure/AKS
      - template: azDevOps/azure/templates/steps/login-services.yml@templates
        parameters:
          # Azure
          login_azure: true
          azure_tenant_id: '$(azure_tenant_id)'
          azure_subscription_id: '$(azure_subscription_id)'
          azure_client_id: '$(azure_client_id)'
          azure_client_secret: '$(azure_client_secret)'
          # Kubernetes
          login_kubernetes: false
          devops_artefact_name: '${{ parameters.devops_artefact_name }}'

      # Audit dependencies
      - ${{ if eq(parameters.build_audit, true) }}:
        - template: ../steps/build-audit-dependencies-node.yml
          parameters:
            versionSpec: ${{ parameters.versionSpec }}
            workingDirectory: ${{ parameters.project_root_dir }}

      # Install dependencies
      - template: ../steps/build-install-dependencies-node.yml
        parameters:
          versionSpec: ${{ parameters.versionSpec }}
          workingDirectory: ${{ parameters.project_root_dir }}

      # Linting and formatting validation
      - ${{ if eq(parameters.lint_formatting, true) }}:
          - template: ../steps/test-static-validate-node.yml
            parameters:
              versionSpec: ${{ parameters.versionSpec }}
              workingDirectory: ${{ parameters.project_root_dir }}
              lintingSharedConfigPackage: ${{ parameters.shared_eslint_config }}

      # Linting and unit tests
      - ${{ if eq(parameters.unit_test, true) }}:
          - template: ../steps/test-unit-node.yml
            parameters:
              versionSpec: ${{ parameters.versionSpec }}
              workingDirectory: ${{ parameters.project_root_dir }}

      # Functional tests (e2e)
      - ${{ if eq(parameters.e2e_test, true) }}:
          - template: ../steps/test-functional-cypress.yml
            parameters:
              env_vars: 
                PORT: 3000
                APP_BASE_URL: "http://localhost"
                MENU_API_URL: "http://dev.amidostacks.com/api/menu"
                APP_BASE_PATH: ""
                NODE_ENV: dev
                # avoid warnings about terminal
                TERM: xterm
              workingDirectory: ${{ parameters.project_root_dir }}
      
      # SonarCloud
      - ${{ if eq(parameters.static_code_analysis, true) }}:
          - template: ../steps/test-static-code-sonar.yml
            parameters:
              workingDirectory: ${{ parameters.project_root_dir }}

      # Consumer driven contract tests
      - ${{ if eq(parameters.contract_test, true) }}:
          - template: ../steps/test-contract-pact.yml
            parameters:
              versionSpec: ${{ parameters.versionSpec }}
              build_number: ${{ parameters.docker_imagetag }}
              workingDirectory: ${{ parameters.project_root_dir }}

      # Check with Pact broker if safe to proceed with deployment (breaking contract changes)
      - ${{ if and(eq(parameters.contract_test, true), eq(parameters.contract_check_can_deploy, true)) }}:
          - template: ../steps/deploy-contract-pact-can-deploy.yml
            parameters:
              workingDirectory: ${{ parameters.project_root_dir }}

      # STEP build NPM for Azure registry
      - ${{ if eq(parameters.build_on_server, true) }}:
          - task: Npm@1
            displayName: Build on ADO using custom feeds
            inputs:
              command: 'custom' # Options: install, publish, custom
              customCommand: 'ci --only=prod'
              workingDirectory: ${{ parameters.project_root_dir }}
              customRegistry: 'useNpmrc'

      # Build Docker Image, Scan and Push to Repository
      - ${{ if eq(parameters.docker_build, true) }}:
          - template: ../steps/build-container-image.yml
            parameters:
              workingDirectory: ${{ parameters.docker_workdir }}
              docker_build_additional_args: ${{ parameters.docker_build_additional_args }}
              docker_imagename: ${{ parameters.docker_imagename }}
              docker_imagetag: ${{ parameters.docker_imagetag }}
              docker_containerregistryname: ${{ parameters.docker_containerregistryname }}

      # Build Docker Image, Scan and Push to Repository
      - ${{ if eq(parameters.git_do_tag_release, true) }}:
          - bash: |
              git config --global user.email "williamayerst@github.com"
              git config --global user.name "williamayerst"
              git tag -a v${{ parameters.git_release_tag }} -m "CI generate"
              git push origin v${{ parameters.git_release_tag }}
            displayName: Git Tag release
            workingDirectory: ${{ parameters.project_root_dir }}

      # Do Lerna release
      - ${{ if eq(parameters.publish_packages_lerna, true) }}:
          - bash: |
              ${{ parameters.lerna_command }}
            displayName: Lerna Publish
            workingDirectory: ${{ parameters.lerna_rootDir }}

      # Publish Artefacts if required
      - ${{ if eq(parameters.functional_test, true) }}:
          - task: PublishPipelineArtifact@1
            displayName: 'Publish: Functional Tests Artifact'
            inputs:
              path: '${{ parameters.functional_test_path }}'
              artifact: '${{ parameters.functional_test_artefact }}'

      - ${{ if eq(parameters.build_file, true) }}:
          - task: PublishPipelineArtifact@1
            displayName: 'Publish: Build Artefacts'
            inputs:
              path: '${{ parameters.build_file_path }}'
              artifact: '${{ parameters.build_file_artefact }}'
