"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const prompts_1 = require("prompts");
const path_1 = require("path");
const fs_1 = require("fs");
const selectors_1 = __importDefault(require("./selectors"));
// FLOW 
// ProjectName 
// project Type (SSR/CSR)
// --> express with next
// --> platform target (AKS)
// --> deployment tooling (TFS)
let userSelection = {};
let exitMessage = {};
/**
 *
 * @param default_project_name
 * @returns
 */
async function runCli(default_project_name, cli_args) {
    // v0 of Question Selection
    // let user_selection: PromptAnswer
    if (cli_args.length > 0) {
        userSelection = await _get_from_config(cli_args[0]);
    }
    else {
        userSelection = await _get_from_cli(default_project_name);
    }
    // selections.project_name = userSelection
    return await _select_flow(userSelection);
}
exports.runCli = runCli;
/**
 * @private
 * @param default_project_name
 */
async function _get_from_cli(default_project_name) {
    let cliSelection;
    // Always assigning the project name question - static forever
    let initialQs = new Array({
        type: 'text',
        name: 'project_name',
        message: 'Select Project Name',
        initial: default_project_name
    });
    const questions = JSON.parse(fs_1.readFileSync(path_1.join(__dirname, 'config/questions.json'), 'utf-8').trim());
    questions.forEach(el => {
        initialQs = [...initialQs, el];
    });
    cliSelection = await prompts_1.prompt(initialQs);
    return cliSelection;
    // console.log('cliSelection :', JSON.stringify(cliSelection))
}
/**
 * @private
 * @param config_path
 */
async function _get_from_config(config_path) {
    let configSelection;
    if (path_1.isAbsolute(config_path)) {
        configSelection = JSON.parse(fs_1.readFileSync(config_path, 'utf-8').trim());
    }
    else {
        configSelection = JSON.parse(fs_1.readFileSync(path_1.resolve(process.cwd(), config_path), 'utf-8').trim());
    }
    return configSelection;
}
async function _select_flow(selection) {
    let determined_choice = `${selection.project_type}_${selection.platform}_${selection.deployment}`;
    const workflows = {
        ssr_aks_tfs: selectors_1.default.option1
    };
    try {
        let message = await workflows[determined_choice](selection);
        exitMessage.code = 0;
        exitMessage.message = message;
        // return exitMessage
    }
    catch (ex) {
        exitMessage.code = ex.code || -1;
        exitMessage.message = ex.message;
    }
    return exitMessage;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvbXB0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsicHJvbXB0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEscUNBQXlDO0FBQ3pDLCtCQUEwRDtBQUMxRCwyQkFBMkM7QUFJM0MsNERBQXNDO0FBRXRDLFFBQVE7QUFDUixlQUFlO0FBQ2YseUJBQXlCO0FBQ3pCLHdCQUF3QjtBQUN4Qiw0QkFBNEI7QUFDNUIsK0JBQStCO0FBRS9CLElBQUksYUFBYSxHQUErQixFQUFFLENBQUE7QUFDbEQsSUFBSSxXQUFXLEdBQTZCLEVBQUUsQ0FBQTtBQUU5Qzs7OztHQUlHO0FBQ0gsS0FBSyxVQUFVLE1BQU0sQ0FBQyxvQkFBNEIsRUFBRSxRQUF1QjtJQUN2RSwyQkFBMkI7SUFDM0IsbUNBQW1DO0lBQ25DLElBQUksUUFBUSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7UUFDckIsYUFBYSxHQUFHLE1BQU0sZ0JBQWdCLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FDdEQ7U0FBTTtRQUNILGFBQWEsR0FBRyxNQUFNLGFBQWEsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFBO0tBQzVEO0lBQ0QsMENBQTBDO0lBRTFDLE9BQU8sTUFBTSxZQUFZLENBQUMsYUFBYSxDQUFDLENBQUE7QUFFNUMsQ0FBQztBQStEUSx3QkFBTTtBQTdEZjs7O0dBR0c7QUFDSCxLQUFLLFVBQVUsYUFBYSxDQUFDLG9CQUE0QjtJQUN0RCxJQUFJLFlBQTBCLENBQUE7SUFFN0IsOERBQThEO0lBQzlELElBQUksU0FBUyxHQUEwQixJQUFJLEtBQUssQ0FBaUI7UUFDN0QsSUFBSSxFQUFFLE1BQU07UUFDWixJQUFJLEVBQUUsY0FBYztRQUNwQixPQUFPLEVBQUUscUJBQXFCO1FBQzlCLE9BQU8sRUFBRSxvQkFBb0I7S0FDaEMsQ0FBQyxDQUFBO0lBRUYsTUFBTSxTQUFTLEdBQTBCLElBQUksQ0FBQyxLQUFLLENBQUMsaUJBQVksQ0FBQyxXQUFJLENBQUMsU0FBUyxFQUFFLHVCQUF1QixDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQTtJQUMzSCxTQUFTLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxFQUFFO1FBQ25CLFNBQVMsR0FBRyxDQUFDLEdBQUcsU0FBUyxFQUFFLEVBQUUsQ0FBQyxDQUFBO0lBQ2xDLENBQUMsQ0FBQyxDQUFDO0lBRUgsWUFBWSxHQUFHLE1BQU0sZ0JBQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQTtJQUN0QyxPQUFPLFlBQVksQ0FBQztJQUNwQiw4REFBOEQ7QUFDbEUsQ0FBQztBQUVEOzs7R0FHRztBQUNILEtBQUssVUFBVSxnQkFBZ0IsQ0FBQyxXQUFtQjtJQUNoRCxJQUFJLGVBQTZCLENBQUE7SUFFaEMsSUFBSSxpQkFBVSxDQUFDLFdBQVcsQ0FBQyxFQUFDO1FBQ3hCLGVBQWUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLGlCQUFZLENBQUMsV0FBVyxFQUFFLE9BQU8sQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUE7S0FDMUU7U0FBTTtRQUNILGVBQWUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLGlCQUFZLENBQUMsY0FBTyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsRUFBRSxXQUFXLENBQUMsRUFBRSxPQUFPLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFBO0tBQ2xHO0lBRUQsT0FBTyxlQUFlLENBQUM7QUFFM0IsQ0FBQztBQUVELEtBQUssVUFBVSxZQUFZLENBQUMsU0FBdUI7SUFDL0MsSUFBSSxpQkFBaUIsR0FBRyxHQUFHLFNBQVMsQ0FBQyxZQUFZLElBQUksU0FBUyxDQUFDLFFBQVEsSUFBSSxTQUFTLENBQUMsVUFBVSxFQUFFLENBQUE7SUFDakcsTUFBTSxTQUFTLEdBQVE7UUFDbkIsV0FBVyxFQUFFLG1CQUFZLENBQUMsT0FBTztLQUNwQyxDQUFBO0lBRUQsSUFBSTtRQUNBLElBQUksT0FBTyxHQUFHLE1BQU0sU0FBUyxDQUFDLGlCQUFpQixDQUFDLENBQUMsU0FBUyxDQUFDLENBQUE7UUFDM0QsV0FBVyxDQUFDLElBQUksR0FBRyxDQUFDLENBQUE7UUFDcEIsV0FBVyxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUE7UUFDN0IscUJBQXFCO0tBRXhCO0lBQUMsT0FBTyxFQUFFLEVBQUU7UUFDVCxXQUFXLENBQUMsSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUE7UUFDaEMsV0FBVyxDQUFDLE9BQU8sR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFBO0tBQ25DO0lBQ0QsT0FBTyxXQUFXLENBQUE7QUFDdEIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHByb21wdCwgcHJvbXB0cyB9IGZyb20gJ3Byb21wdHMnXG5pbXBvcnQgeyBiYXNlbmFtZSwgcmVzb2x2ZSwgam9pbiwgaXNBYnNvbHV0ZSB9IGZyb20gJ3BhdGgnXG5pbXBvcnQgeyByZWFkRmlsZSwgcmVhZEZpbGVTeW5jIH0gZnJvbSAnZnMnXG5pbXBvcnQgeyBQcm9tcHRRdWVzdGlvbiB9IGZyb20gJy4vbW9kZWwvcHJvbXB0X3F1ZXN0aW9uJ1xuaW1wb3J0IHsgUHJvbXB0QW5zd2VyIH0gZnJvbSAnLi9tb2RlbC9wcm9tcHRfYW5zd2VyJ1xuaW1wb3J0IHsgRXhpdE1lc3NhZ2UgfSBmcm9tICcuL21vZGVsL2NsaVJlc3BvbnNlJ1xuaW1wb3J0IEZsb3dTZWxlY3RvciBmcm9tICcuL3NlbGVjdG9ycydcblxuLy8gRkxPVyBcbi8vIFByb2plY3ROYW1lIFxuLy8gcHJvamVjdCBUeXBlIChTU1IvQ1NSKVxuLy8gLS0+IGV4cHJlc3Mgd2l0aCBuZXh0XG4vLyAtLT4gcGxhdGZvcm0gdGFyZ2V0IChBS1MpXG4vLyAtLT4gZGVwbG95bWVudCB0b29saW5nIChURlMpXG5cbmxldCB1c2VyU2VsZWN0aW9uOiBQcm9tcHRBbnN3ZXIgPSA8UHJvbXB0QW5zd2VyPnt9XG5sZXQgZXhpdE1lc3NhZ2U6IEV4aXRNZXNzYWdlID0gPEV4aXRNZXNzYWdlPnt9XG5cbi8qKlxuICogXG4gKiBAcGFyYW0gZGVmYXVsdF9wcm9qZWN0X25hbWUgXG4gKiBAcmV0dXJucyBcbiAqL1xuYXN5bmMgZnVuY3Rpb24gcnVuQ2xpKGRlZmF1bHRfcHJvamVjdF9uYW1lOiBzdHJpbmcsIGNsaV9hcmdzOiBBcnJheTxzdHJpbmc+KTogUHJvbWlzZTxFeGl0TWVzc2FnZT4ge1xuICAgIC8vIHYwIG9mIFF1ZXN0aW9uIFNlbGVjdGlvblxuICAgIC8vIGxldCB1c2VyX3NlbGVjdGlvbjogUHJvbXB0QW5zd2VyXG4gICAgaWYgKGNsaV9hcmdzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgdXNlclNlbGVjdGlvbiA9IGF3YWl0IF9nZXRfZnJvbV9jb25maWcoY2xpX2FyZ3NbMF0pXG4gICAgfSBlbHNlIHtcbiAgICAgICAgdXNlclNlbGVjdGlvbiA9IGF3YWl0IF9nZXRfZnJvbV9jbGkoZGVmYXVsdF9wcm9qZWN0X25hbWUpXG4gICAgfVxuICAgIC8vIHNlbGVjdGlvbnMucHJvamVjdF9uYW1lID0gdXNlclNlbGVjdGlvblxuXG4gICAgcmV0dXJuIGF3YWl0IF9zZWxlY3RfZmxvdyh1c2VyU2VsZWN0aW9uKVxuXG59XG5cbi8qKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSBkZWZhdWx0X3Byb2plY3RfbmFtZSBcbiAqL1xuYXN5bmMgZnVuY3Rpb24gX2dldF9mcm9tX2NsaShkZWZhdWx0X3Byb2plY3RfbmFtZTogc3RyaW5nKTogUHJvbWlzZTxQcm9tcHRBbnN3ZXI+IHtcbiAgIGxldCBjbGlTZWxlY3Rpb246IFByb21wdEFuc3dlclxuICAgIFxuICAgIC8vIEFsd2F5cyBhc3NpZ25pbmcgdGhlIHByb2plY3QgbmFtZSBxdWVzdGlvbiAtIHN0YXRpYyBmb3JldmVyXG4gICAgbGV0IGluaXRpYWxRczogQXJyYXk8UHJvbXB0UXVlc3Rpb24+ID0gbmV3IEFycmF5PFByb21wdFF1ZXN0aW9uPih7XG4gICAgICAgIHR5cGU6ICd0ZXh0JyxcbiAgICAgICAgbmFtZTogJ3Byb2plY3RfbmFtZScsXG4gICAgICAgIG1lc3NhZ2U6ICdTZWxlY3QgUHJvamVjdCBOYW1lJyxcbiAgICAgICAgaW5pdGlhbDogZGVmYXVsdF9wcm9qZWN0X25hbWVcbiAgICB9KVxuXG4gICAgY29uc3QgcXVlc3Rpb25zOiBBcnJheTxQcm9tcHRRdWVzdGlvbj4gPSBKU09OLnBhcnNlKHJlYWRGaWxlU3luYyhqb2luKF9fZGlybmFtZSwgJ2NvbmZpZy9xdWVzdGlvbnMuanNvbicpLCAndXRmLTgnKS50cmltKCkpXG4gICAgcXVlc3Rpb25zLmZvckVhY2goZWwgPT4ge1xuICAgICAgICBpbml0aWFsUXMgPSBbLi4uaW5pdGlhbFFzLCBlbF1cbiAgICB9KTtcblxuICAgIGNsaVNlbGVjdGlvbiA9IGF3YWl0IHByb21wdChpbml0aWFsUXMpXG4gICAgcmV0dXJuIGNsaVNlbGVjdGlvbjtcbiAgICAvLyBjb25zb2xlLmxvZygnY2xpU2VsZWN0aW9uIDonLCBKU09OLnN0cmluZ2lmeShjbGlTZWxlY3Rpb24pKVxufVxuXG4vKipcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0gY29uZmlnX3BhdGggXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIF9nZXRfZnJvbV9jb25maWcoY29uZmlnX3BhdGg6IHN0cmluZyk6IFByb21pc2U8UHJvbXB0QW5zd2VyPiB7XG4gICBsZXQgY29uZmlnU2VsZWN0aW9uOiBQcm9tcHRBbnN3ZXJcblxuICAgIGlmIChpc0Fic29sdXRlKGNvbmZpZ19wYXRoKSl7XG4gICAgICAgIGNvbmZpZ1NlbGVjdGlvbiA9IEpTT04ucGFyc2UocmVhZEZpbGVTeW5jKGNvbmZpZ19wYXRoLCAndXRmLTgnKS50cmltKCkpXG4gICAgfSBlbHNlIHtcbiAgICAgICAgY29uZmlnU2VsZWN0aW9uID0gSlNPTi5wYXJzZShyZWFkRmlsZVN5bmMocmVzb2x2ZShwcm9jZXNzLmN3ZCgpLCBjb25maWdfcGF0aCksICd1dGYtOCcpLnRyaW0oKSlcbiAgICB9XG5cbiAgICByZXR1cm4gY29uZmlnU2VsZWN0aW9uO1xuXG59XG5cbmFzeW5jIGZ1bmN0aW9uIF9zZWxlY3RfZmxvdyhzZWxlY3Rpb246IFByb21wdEFuc3dlcik6IFByb21pc2U8RXhpdE1lc3NhZ2U+IHtcbiAgICBsZXQgZGV0ZXJtaW5lZF9jaG9pY2UgPSBgJHtzZWxlY3Rpb24ucHJvamVjdF90eXBlfV8ke3NlbGVjdGlvbi5wbGF0Zm9ybX1fJHtzZWxlY3Rpb24uZGVwbG95bWVudH1gXG4gICAgY29uc3Qgd29ya2Zsb3dzOiBhbnkgPSB7XG4gICAgICAgIHNzcl9ha3NfdGZzOiBGbG93U2VsZWN0b3Iub3B0aW9uMVxuICAgIH1cbiAgICAgICAgXG4gICAgdHJ5IHtcbiAgICAgICAgbGV0IG1lc3NhZ2UgPSBhd2FpdCB3b3JrZmxvd3NbZGV0ZXJtaW5lZF9jaG9pY2VdKHNlbGVjdGlvbilcbiAgICAgICAgZXhpdE1lc3NhZ2UuY29kZSA9IDBcbiAgICAgICAgZXhpdE1lc3NhZ2UubWVzc2FnZSA9IG1lc3NhZ2VcbiAgICAgICAgLy8gcmV0dXJuIGV4aXRNZXNzYWdlXG5cbiAgICB9IGNhdGNoIChleCkge1xuICAgICAgICBleGl0TWVzc2FnZS5jb2RlID0gZXguY29kZSB8fCAtMVxuICAgICAgICBleGl0TWVzc2FnZS5tZXNzYWdlID0gZXgubWVzc2FnZVxuICAgIH1cbiAgICByZXR1cm4gZXhpdE1lc3NhZ2Vcbn1cblxuZXhwb3J0IHsgcnVuQ2xpIH1cbiJdfQ==