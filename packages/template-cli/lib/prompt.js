"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const prompts_1 = require("prompts");
const path_1 = require("path");
const fs_1 = require("fs");
const questions_1 = __importDefault(require("./config/questions"));
const selectors_1 = __importDefault(require("./selectors"));
// FLOW 
// ProjectName 
// project Type (SSR/CSR)
// --> express with next
// --> platform target (AKS)
// --> deployment tooling (TFS)
let userSelection = {};
let exitMessage = {};
/**
 *
 * @param default_project_name
 * @returns
 */
async function runCli(default_project_name, cli_args) {
    // v0 of Question Selection
    // let user_selection: PromptAnswer
    if (cli_args.length > 0) {
        userSelection = await _get_from_config(cli_args[0]);
    }
    else {
        userSelection = await _get_from_cli(default_project_name);
    }
    // selections.project_name = userSelection
    return await _select_flow(userSelection);
}
exports.runCli = runCli;
/**
 * @private
 * @param default_project_name
 */
async function _get_from_cli(default_project_name) {
    let cliSelection;
    // Always assigning the project name question - static forever
    let initialQs = new Array({
        type: 'text',
        name: 'project_name',
        message: 'Select Project Name',
        initial: default_project_name
    });
    const questions = questions_1.default();
    questions.forEach(el => {
        initialQs = [...initialQs, el];
    });
    cliSelection = await prompts_1.prompt(initialQs);
    return cliSelection;
}
/**
 * @private
 * @param config_path
 */
async function _get_from_config(config_path) {
    let configSelection;
    if (path_1.isAbsolute(config_path)) {
        configSelection = JSON.parse(fs_1.readFileSync(config_path, 'utf-8').trim());
    }
    else {
        configSelection = JSON.parse(fs_1.readFileSync(path_1.resolve(process.cwd(), config_path), 'utf-8').trim());
    }
    return configSelection;
}
async function _select_flow(selection) {
    let determined_choice = `${selection.project_type}_${selection.platform}_${selection.deployment}`;
    const workflows = {
        ssr_aks_azdevops: selectors_1.default.option1
    };
    try {
        let message = await workflows[determined_choice](selection);
        exitMessage.code = 0;
        exitMessage.message = message;
    }
    catch (ex) {
        exitMessage.code = ex.code || -1;
        exitMessage.message = ex.message;
    }
    return exitMessage;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvbXB0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsicHJvbXB0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEscUNBQXlDO0FBQ3pDLCtCQUEwRDtBQUMxRCwyQkFBMkM7QUFDM0MsbUVBQTZDO0FBSTdDLDREQUFzQztBQUV0QyxRQUFRO0FBQ1IsZUFBZTtBQUNmLHlCQUF5QjtBQUN6Qix3QkFBd0I7QUFDeEIsNEJBQTRCO0FBQzVCLCtCQUErQjtBQUUvQixJQUFJLGFBQWEsR0FBK0IsRUFBRSxDQUFBO0FBQ2xELElBQUksV0FBVyxHQUE2QixFQUFFLENBQUE7QUFFOUM7Ozs7R0FJRztBQUNILEtBQUssVUFBVSxNQUFNLENBQUMsb0JBQTRCLEVBQUUsUUFBdUI7SUFDdkUsMkJBQTJCO0lBQzNCLG1DQUFtQztJQUNuQyxJQUFJLFFBQVEsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1FBQ3JCLGFBQWEsR0FBRyxNQUFNLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQ3REO1NBQU07UUFDSCxhQUFhLEdBQUcsTUFBTSxhQUFhLENBQUMsb0JBQW9CLENBQUMsQ0FBQTtLQUM1RDtJQUNELDBDQUEwQztJQUUxQyxPQUFPLE1BQU0sWUFBWSxDQUFDLGFBQWEsQ0FBQyxDQUFBO0FBRTVDLENBQUM7QUE2RFEsd0JBQU07QUEzRGY7OztHQUdHO0FBQ0gsS0FBSyxVQUFVLGFBQWEsQ0FBQyxvQkFBNEI7SUFDdEQsSUFBSSxZQUEwQixDQUFBO0lBRTdCLDhEQUE4RDtJQUM5RCxJQUFJLFNBQVMsR0FBMEIsSUFBSSxLQUFLLENBQWlCO1FBQzdELElBQUksRUFBRSxNQUFNO1FBQ1osSUFBSSxFQUFFLGNBQWM7UUFDcEIsT0FBTyxFQUFFLHFCQUFxQjtRQUM5QixPQUFPLEVBQUUsb0JBQW9CO0tBQ2hDLENBQUMsQ0FBQTtJQUVGLE1BQU0sU0FBUyxHQUEwQixtQkFBWSxFQUFFLENBQUE7SUFDdkQsU0FBUyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsRUFBRTtRQUNuQixTQUFTLEdBQUcsQ0FBQyxHQUFHLFNBQVMsRUFBRSxFQUFFLENBQUMsQ0FBQTtJQUNsQyxDQUFDLENBQUMsQ0FBQztJQUVILFlBQVksR0FBRyxNQUFNLGdCQUFNLENBQUMsU0FBUyxDQUFDLENBQUE7SUFDdEMsT0FBTyxZQUFZLENBQUM7QUFDeEIsQ0FBQztBQUVEOzs7R0FHRztBQUNILEtBQUssVUFBVSxnQkFBZ0IsQ0FBQyxXQUFtQjtJQUNoRCxJQUFJLGVBQTZCLENBQUE7SUFFaEMsSUFBSSxpQkFBVSxDQUFDLFdBQVcsQ0FBQyxFQUFDO1FBQ3hCLGVBQWUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLGlCQUFZLENBQUMsV0FBVyxFQUFFLE9BQU8sQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUE7S0FDMUU7U0FBTTtRQUNILGVBQWUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLGlCQUFZLENBQUMsY0FBTyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsRUFBRSxXQUFXLENBQUMsRUFBRSxPQUFPLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFBO0tBQ2xHO0lBRUQsT0FBTyxlQUFlLENBQUM7QUFFM0IsQ0FBQztBQUVELEtBQUssVUFBVSxZQUFZLENBQUMsU0FBdUI7SUFDL0MsSUFBSSxpQkFBaUIsR0FBRyxHQUFHLFNBQVMsQ0FBQyxZQUFZLElBQUksU0FBUyxDQUFDLFFBQVEsSUFBSSxTQUFTLENBQUMsVUFBVSxFQUFFLENBQUE7SUFDakcsTUFBTSxTQUFTLEdBQVE7UUFDbkIsZ0JBQWdCLEVBQUUsbUJBQVksQ0FBQyxPQUFPO0tBQ3pDLENBQUE7SUFFRCxJQUFJO1FBQ0EsSUFBSSxPQUFPLEdBQUcsTUFBTSxTQUFTLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQTtRQUMzRCxXQUFXLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQTtRQUNwQixXQUFXLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQTtLQUVoQztJQUFDLE9BQU8sRUFBRSxFQUFFO1FBQ1QsV0FBVyxDQUFDLElBQUksR0FBRyxFQUFFLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFBO1FBQ2hDLFdBQVcsQ0FBQyxPQUFPLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQTtLQUNuQztJQUNELE9BQU8sV0FBVyxDQUFBO0FBQ3RCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBwcm9tcHQsIHByb21wdHMgfSBmcm9tICdwcm9tcHRzJ1xuaW1wb3J0IHsgYmFzZW5hbWUsIHJlc29sdmUsIGpvaW4sIGlzQWJzb2x1dGUgfSBmcm9tICdwYXRoJ1xuaW1wb3J0IHsgcmVhZEZpbGUsIHJlYWRGaWxlU3luYyB9IGZyb20gJ2ZzJ1xuaW1wb3J0IGNsaVF1ZXN0aW9ucyBmcm9tICcuL2NvbmZpZy9xdWVzdGlvbnMnXG5pbXBvcnQgeyBQcm9tcHRRdWVzdGlvbiB9IGZyb20gJy4vbW9kZWwvcHJvbXB0X3F1ZXN0aW9uJ1xuaW1wb3J0IHsgUHJvbXB0QW5zd2VyIH0gZnJvbSAnLi9tb2RlbC9wcm9tcHRfYW5zd2VyJ1xuaW1wb3J0IHsgRXhpdE1lc3NhZ2UgfSBmcm9tICcuL21vZGVsL2NsaVJlc3BvbnNlJ1xuaW1wb3J0IEZsb3dTZWxlY3RvciBmcm9tICcuL3NlbGVjdG9ycydcblxuLy8gRkxPVyBcbi8vIFByb2plY3ROYW1lIFxuLy8gcHJvamVjdCBUeXBlIChTU1IvQ1NSKVxuLy8gLS0+IGV4cHJlc3Mgd2l0aCBuZXh0XG4vLyAtLT4gcGxhdGZvcm0gdGFyZ2V0IChBS1MpXG4vLyAtLT4gZGVwbG95bWVudCB0b29saW5nIChURlMpXG5cbmxldCB1c2VyU2VsZWN0aW9uOiBQcm9tcHRBbnN3ZXIgPSA8UHJvbXB0QW5zd2VyPnt9XG5sZXQgZXhpdE1lc3NhZ2U6IEV4aXRNZXNzYWdlID0gPEV4aXRNZXNzYWdlPnt9XG5cbi8qKlxuICogXG4gKiBAcGFyYW0gZGVmYXVsdF9wcm9qZWN0X25hbWUgXG4gKiBAcmV0dXJucyBcbiAqL1xuYXN5bmMgZnVuY3Rpb24gcnVuQ2xpKGRlZmF1bHRfcHJvamVjdF9uYW1lOiBzdHJpbmcsIGNsaV9hcmdzOiBBcnJheTxzdHJpbmc+KTogUHJvbWlzZTxFeGl0TWVzc2FnZT4ge1xuICAgIC8vIHYwIG9mIFF1ZXN0aW9uIFNlbGVjdGlvblxuICAgIC8vIGxldCB1c2VyX3NlbGVjdGlvbjogUHJvbXB0QW5zd2VyXG4gICAgaWYgKGNsaV9hcmdzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgdXNlclNlbGVjdGlvbiA9IGF3YWl0IF9nZXRfZnJvbV9jb25maWcoY2xpX2FyZ3NbMF0pXG4gICAgfSBlbHNlIHtcbiAgICAgICAgdXNlclNlbGVjdGlvbiA9IGF3YWl0IF9nZXRfZnJvbV9jbGkoZGVmYXVsdF9wcm9qZWN0X25hbWUpXG4gICAgfVxuICAgIC8vIHNlbGVjdGlvbnMucHJvamVjdF9uYW1lID0gdXNlclNlbGVjdGlvblxuXG4gICAgcmV0dXJuIGF3YWl0IF9zZWxlY3RfZmxvdyh1c2VyU2VsZWN0aW9uKVxuXG59XG5cbi8qKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSBkZWZhdWx0X3Byb2plY3RfbmFtZSBcbiAqL1xuYXN5bmMgZnVuY3Rpb24gX2dldF9mcm9tX2NsaShkZWZhdWx0X3Byb2plY3RfbmFtZTogc3RyaW5nKTogUHJvbWlzZTxQcm9tcHRBbnN3ZXI+IHtcbiAgIGxldCBjbGlTZWxlY3Rpb246IFByb21wdEFuc3dlclxuICAgIFxuICAgIC8vIEFsd2F5cyBhc3NpZ25pbmcgdGhlIHByb2plY3QgbmFtZSBxdWVzdGlvbiAtIHN0YXRpYyBmb3JldmVyXG4gICAgbGV0IGluaXRpYWxRczogQXJyYXk8UHJvbXB0UXVlc3Rpb24+ID0gbmV3IEFycmF5PFByb21wdFF1ZXN0aW9uPih7XG4gICAgICAgIHR5cGU6ICd0ZXh0JyxcbiAgICAgICAgbmFtZTogJ3Byb2plY3RfbmFtZScsXG4gICAgICAgIG1lc3NhZ2U6ICdTZWxlY3QgUHJvamVjdCBOYW1lJyxcbiAgICAgICAgaW5pdGlhbDogZGVmYXVsdF9wcm9qZWN0X25hbWVcbiAgICB9KVxuXG4gICAgY29uc3QgcXVlc3Rpb25zOiBBcnJheTxQcm9tcHRRdWVzdGlvbj4gPSBjbGlRdWVzdGlvbnMoKVxuICAgIHF1ZXN0aW9ucy5mb3JFYWNoKGVsID0+IHtcbiAgICAgICAgaW5pdGlhbFFzID0gWy4uLmluaXRpYWxRcywgZWxdXG4gICAgfSk7XG5cbiAgICBjbGlTZWxlY3Rpb24gPSBhd2FpdCBwcm9tcHQoaW5pdGlhbFFzKVxuICAgIHJldHVybiBjbGlTZWxlY3Rpb247XG59XG5cbi8qKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSBjb25maWdfcGF0aCBcbiAqL1xuYXN5bmMgZnVuY3Rpb24gX2dldF9mcm9tX2NvbmZpZyhjb25maWdfcGF0aDogc3RyaW5nKTogUHJvbWlzZTxQcm9tcHRBbnN3ZXI+IHtcbiAgIGxldCBjb25maWdTZWxlY3Rpb246IFByb21wdEFuc3dlclxuXG4gICAgaWYgKGlzQWJzb2x1dGUoY29uZmlnX3BhdGgpKXtcbiAgICAgICAgY29uZmlnU2VsZWN0aW9uID0gSlNPTi5wYXJzZShyZWFkRmlsZVN5bmMoY29uZmlnX3BhdGgsICd1dGYtOCcpLnRyaW0oKSlcbiAgICB9IGVsc2Uge1xuICAgICAgICBjb25maWdTZWxlY3Rpb24gPSBKU09OLnBhcnNlKHJlYWRGaWxlU3luYyhyZXNvbHZlKHByb2Nlc3MuY3dkKCksIGNvbmZpZ19wYXRoKSwgJ3V0Zi04JykudHJpbSgpKVxuICAgIH1cblxuICAgIHJldHVybiBjb25maWdTZWxlY3Rpb247XG5cbn1cblxuYXN5bmMgZnVuY3Rpb24gX3NlbGVjdF9mbG93KHNlbGVjdGlvbjogUHJvbXB0QW5zd2VyKTogUHJvbWlzZTxFeGl0TWVzc2FnZT4ge1xuICAgIGxldCBkZXRlcm1pbmVkX2Nob2ljZSA9IGAke3NlbGVjdGlvbi5wcm9qZWN0X3R5cGV9XyR7c2VsZWN0aW9uLnBsYXRmb3JtfV8ke3NlbGVjdGlvbi5kZXBsb3ltZW50fWBcbiAgICBjb25zdCB3b3JrZmxvd3M6IGFueSA9IHtcbiAgICAgICAgc3NyX2Frc19hemRldm9wczogRmxvd1NlbGVjdG9yLm9wdGlvbjFcbiAgICB9XG4gICAgICAgIFxuICAgIHRyeSB7XG4gICAgICAgIGxldCBtZXNzYWdlID0gYXdhaXQgd29ya2Zsb3dzW2RldGVybWluZWRfY2hvaWNlXShzZWxlY3Rpb24pXG4gICAgICAgIGV4aXRNZXNzYWdlLmNvZGUgPSAwXG4gICAgICAgIGV4aXRNZXNzYWdlLm1lc3NhZ2UgPSBtZXNzYWdlXG5cbiAgICB9IGNhdGNoIChleCkge1xuICAgICAgICBleGl0TWVzc2FnZS5jb2RlID0gZXguY29kZSB8fCAtMVxuICAgICAgICBleGl0TWVzc2FnZS5tZXNzYWdlID0gZXgubWVzc2FnZVxuICAgIH1cbiAgICByZXR1cm4gZXhpdE1lc3NhZ2Vcbn1cblxuZXhwb3J0IHsgcnVuQ2xpIH1cbiJdfQ==