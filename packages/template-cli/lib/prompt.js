"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const prompts_1 = require("prompts");
const path_1 = require("path");
const fs_1 = require("fs");
const questions_1 = __importDefault(require("./config/questions"));
const selectors_1 = __importDefault(require("./selectors"));
// FLOW 
// ProjectName 
// project Type (SSR/CSR)
// --> express with next
// --> platform target (AKS)
// --> deployment tooling (TFS)
let userSelection = {};
let exitMessage = {};
/**
 *
 * @param default_project_name
 * @returns
 */
async function runCli(default_project_name, cli_args) {
    // v0 of Question Selection
    // let user_selection: PromptAnswer
    if (cli_args.length > 0) {
        userSelection = await _get_from_config(cli_args[0]);
    }
    else {
        userSelection = await _get_from_cli(default_project_name);
    }
    // selections.project_name = userSelection
    return await _select_flow(userSelection);
}
exports.runCli = runCli;
/**
 * @private
 * @param default_project_name
 */
async function _get_from_cli(default_project_name) {
    let cliSelection;
    // Always assigning the project name question - static forever
    let initialQs = new Array({
        type: 'text',
        name: 'project_name',
        message: 'Select Project Name',
        initial: default_project_name
    });
    const questions = questions_1.default(); //JSON.parse(readFileSync(join(__dirname, 'config/questions.json'), 'utf-8').trim())
    questions.forEach(el => {
        initialQs = [...initialQs, el];
    });
    cliSelection = await prompts_1.prompt(initialQs);
    return cliSelection;
    // console.log('cliSelection :', JSON.stringify(cliSelection))
}
/**
 * @private
 * @param config_path
 */
async function _get_from_config(config_path) {
    let configSelection;
    if (path_1.isAbsolute(config_path)) {
        configSelection = JSON.parse(fs_1.readFileSync(config_path, 'utf-8').trim());
    }
    else {
        configSelection = JSON.parse(fs_1.readFileSync(path_1.resolve(process.cwd(), config_path), 'utf-8').trim());
    }
    return configSelection;
}
async function _select_flow(selection) {
    let determined_choice = `${selection.project_type}_${selection.platform}_${selection.deployment}`;
    const workflows = {
        ssr_aks_azdevops: selectors_1.default.option1
    };
    try {
        let message = await workflows[determined_choice](selection);
        exitMessage.code = 0;
        exitMessage.message = message;
        // return exitMessage
    }
    catch (ex) {
        exitMessage.code = ex.code || -1;
        exitMessage.message = ex.message;
    }
    return exitMessage;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvbXB0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsicHJvbXB0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEscUNBQXlDO0FBQ3pDLCtCQUEwRDtBQUMxRCwyQkFBMkM7QUFDM0MsbUVBQTZDO0FBSTdDLDREQUFzQztBQUV0QyxRQUFRO0FBQ1IsZUFBZTtBQUNmLHlCQUF5QjtBQUN6Qix3QkFBd0I7QUFDeEIsNEJBQTRCO0FBQzVCLCtCQUErQjtBQUUvQixJQUFJLGFBQWEsR0FBK0IsRUFBRSxDQUFBO0FBQ2xELElBQUksV0FBVyxHQUE2QixFQUFFLENBQUE7QUFFOUM7Ozs7R0FJRztBQUNILEtBQUssVUFBVSxNQUFNLENBQUMsb0JBQTRCLEVBQUUsUUFBdUI7SUFDdkUsMkJBQTJCO0lBQzNCLG1DQUFtQztJQUNuQyxJQUFJLFFBQVEsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1FBQ3JCLGFBQWEsR0FBRyxNQUFNLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQ3REO1NBQU07UUFDSCxhQUFhLEdBQUcsTUFBTSxhQUFhLENBQUMsb0JBQW9CLENBQUMsQ0FBQTtLQUM1RDtJQUNELDBDQUEwQztJQUUxQyxPQUFPLE1BQU0sWUFBWSxDQUFDLGFBQWEsQ0FBQyxDQUFBO0FBRTVDLENBQUM7QUErRFEsd0JBQU07QUE3RGY7OztHQUdHO0FBQ0gsS0FBSyxVQUFVLGFBQWEsQ0FBQyxvQkFBNEI7SUFDdEQsSUFBSSxZQUEwQixDQUFBO0lBRTdCLDhEQUE4RDtJQUM5RCxJQUFJLFNBQVMsR0FBMEIsSUFBSSxLQUFLLENBQWlCO1FBQzdELElBQUksRUFBRSxNQUFNO1FBQ1osSUFBSSxFQUFFLGNBQWM7UUFDcEIsT0FBTyxFQUFFLHFCQUFxQjtRQUM5QixPQUFPLEVBQUUsb0JBQW9CO0tBQ2hDLENBQUMsQ0FBQTtJQUVGLE1BQU0sU0FBUyxHQUEwQixtQkFBWSxFQUFFLENBQUEsQ0FBQyxvRkFBb0Y7SUFDNUksU0FBUyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsRUFBRTtRQUNuQixTQUFTLEdBQUcsQ0FBQyxHQUFHLFNBQVMsRUFBRSxFQUFFLENBQUMsQ0FBQTtJQUNsQyxDQUFDLENBQUMsQ0FBQztJQUVILFlBQVksR0FBRyxNQUFNLGdCQUFNLENBQUMsU0FBUyxDQUFDLENBQUE7SUFDdEMsT0FBTyxZQUFZLENBQUM7SUFDcEIsOERBQThEO0FBQ2xFLENBQUM7QUFFRDs7O0dBR0c7QUFDSCxLQUFLLFVBQVUsZ0JBQWdCLENBQUMsV0FBbUI7SUFDaEQsSUFBSSxlQUE2QixDQUFBO0lBRWhDLElBQUksaUJBQVUsQ0FBQyxXQUFXLENBQUMsRUFBQztRQUN4QixlQUFlLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxpQkFBWSxDQUFDLFdBQVcsRUFBRSxPQUFPLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFBO0tBQzFFO1NBQU07UUFDSCxlQUFlLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxpQkFBWSxDQUFDLGNBQU8sQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLEVBQUUsV0FBVyxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQTtLQUNsRztJQUVELE9BQU8sZUFBZSxDQUFDO0FBRTNCLENBQUM7QUFFRCxLQUFLLFVBQVUsWUFBWSxDQUFDLFNBQXVCO0lBQy9DLElBQUksaUJBQWlCLEdBQUcsR0FBRyxTQUFTLENBQUMsWUFBWSxJQUFJLFNBQVMsQ0FBQyxRQUFRLElBQUksU0FBUyxDQUFDLFVBQVUsRUFBRSxDQUFBO0lBQ2pHLE1BQU0sU0FBUyxHQUFRO1FBQ25CLGdCQUFnQixFQUFFLG1CQUFZLENBQUMsT0FBTztLQUN6QyxDQUFBO0lBRUQsSUFBSTtRQUNBLElBQUksT0FBTyxHQUFHLE1BQU0sU0FBUyxDQUFDLGlCQUFpQixDQUFDLENBQUMsU0FBUyxDQUFDLENBQUE7UUFDM0QsV0FBVyxDQUFDLElBQUksR0FBRyxDQUFDLENBQUE7UUFDcEIsV0FBVyxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUE7UUFDN0IscUJBQXFCO0tBRXhCO0lBQUMsT0FBTyxFQUFFLEVBQUU7UUFDVCxXQUFXLENBQUMsSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUE7UUFDaEMsV0FBVyxDQUFDLE9BQU8sR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFBO0tBQ25DO0lBQ0QsT0FBTyxXQUFXLENBQUE7QUFDdEIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHByb21wdCwgcHJvbXB0cyB9IGZyb20gJ3Byb21wdHMnXG5pbXBvcnQgeyBiYXNlbmFtZSwgcmVzb2x2ZSwgam9pbiwgaXNBYnNvbHV0ZSB9IGZyb20gJ3BhdGgnXG5pbXBvcnQgeyByZWFkRmlsZSwgcmVhZEZpbGVTeW5jIH0gZnJvbSAnZnMnXG5pbXBvcnQgY2xpUXVlc3Rpb25zIGZyb20gJy4vY29uZmlnL3F1ZXN0aW9ucydcbmltcG9ydCB7IFByb21wdFF1ZXN0aW9uIH0gZnJvbSAnLi9tb2RlbC9wcm9tcHRfcXVlc3Rpb24nXG5pbXBvcnQgeyBQcm9tcHRBbnN3ZXIgfSBmcm9tICcuL21vZGVsL3Byb21wdF9hbnN3ZXInXG5pbXBvcnQgeyBFeGl0TWVzc2FnZSB9IGZyb20gJy4vbW9kZWwvY2xpUmVzcG9uc2UnXG5pbXBvcnQgRmxvd1NlbGVjdG9yIGZyb20gJy4vc2VsZWN0b3JzJ1xuXG4vLyBGTE9XIFxuLy8gUHJvamVjdE5hbWUgXG4vLyBwcm9qZWN0IFR5cGUgKFNTUi9DU1IpXG4vLyAtLT4gZXhwcmVzcyB3aXRoIG5leHRcbi8vIC0tPiBwbGF0Zm9ybSB0YXJnZXQgKEFLUylcbi8vIC0tPiBkZXBsb3ltZW50IHRvb2xpbmcgKFRGUylcblxubGV0IHVzZXJTZWxlY3Rpb246IFByb21wdEFuc3dlciA9IDxQcm9tcHRBbnN3ZXI+e31cbmxldCBleGl0TWVzc2FnZTogRXhpdE1lc3NhZ2UgPSA8RXhpdE1lc3NhZ2U+e31cblxuLyoqXG4gKiBcbiAqIEBwYXJhbSBkZWZhdWx0X3Byb2plY3RfbmFtZSBcbiAqIEByZXR1cm5zIFxuICovXG5hc3luYyBmdW5jdGlvbiBydW5DbGkoZGVmYXVsdF9wcm9qZWN0X25hbWU6IHN0cmluZywgY2xpX2FyZ3M6IEFycmF5PHN0cmluZz4pOiBQcm9taXNlPEV4aXRNZXNzYWdlPiB7XG4gICAgLy8gdjAgb2YgUXVlc3Rpb24gU2VsZWN0aW9uXG4gICAgLy8gbGV0IHVzZXJfc2VsZWN0aW9uOiBQcm9tcHRBbnN3ZXJcbiAgICBpZiAoY2xpX2FyZ3MubGVuZ3RoID4gMCkge1xuICAgICAgICB1c2VyU2VsZWN0aW9uID0gYXdhaXQgX2dldF9mcm9tX2NvbmZpZyhjbGlfYXJnc1swXSlcbiAgICB9IGVsc2Uge1xuICAgICAgICB1c2VyU2VsZWN0aW9uID0gYXdhaXQgX2dldF9mcm9tX2NsaShkZWZhdWx0X3Byb2plY3RfbmFtZSlcbiAgICB9XG4gICAgLy8gc2VsZWN0aW9ucy5wcm9qZWN0X25hbWUgPSB1c2VyU2VsZWN0aW9uXG5cbiAgICByZXR1cm4gYXdhaXQgX3NlbGVjdF9mbG93KHVzZXJTZWxlY3Rpb24pXG5cbn1cblxuLyoqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIGRlZmF1bHRfcHJvamVjdF9uYW1lIFxuICovXG5hc3luYyBmdW5jdGlvbiBfZ2V0X2Zyb21fY2xpKGRlZmF1bHRfcHJvamVjdF9uYW1lOiBzdHJpbmcpOiBQcm9taXNlPFByb21wdEFuc3dlcj4ge1xuICAgbGV0IGNsaVNlbGVjdGlvbjogUHJvbXB0QW5zd2VyXG4gICAgXG4gICAgLy8gQWx3YXlzIGFzc2lnbmluZyB0aGUgcHJvamVjdCBuYW1lIHF1ZXN0aW9uIC0gc3RhdGljIGZvcmV2ZXJcbiAgICBsZXQgaW5pdGlhbFFzOiBBcnJheTxQcm9tcHRRdWVzdGlvbj4gPSBuZXcgQXJyYXk8UHJvbXB0UXVlc3Rpb24+KHtcbiAgICAgICAgdHlwZTogJ3RleHQnLFxuICAgICAgICBuYW1lOiAncHJvamVjdF9uYW1lJyxcbiAgICAgICAgbWVzc2FnZTogJ1NlbGVjdCBQcm9qZWN0IE5hbWUnLFxuICAgICAgICBpbml0aWFsOiBkZWZhdWx0X3Byb2plY3RfbmFtZVxuICAgIH0pXG5cbiAgICBjb25zdCBxdWVzdGlvbnM6IEFycmF5PFByb21wdFF1ZXN0aW9uPiA9IGNsaVF1ZXN0aW9ucygpIC8vSlNPTi5wYXJzZShyZWFkRmlsZVN5bmMoam9pbihfX2Rpcm5hbWUsICdjb25maWcvcXVlc3Rpb25zLmpzb24nKSwgJ3V0Zi04JykudHJpbSgpKVxuICAgIHF1ZXN0aW9ucy5mb3JFYWNoKGVsID0+IHtcbiAgICAgICAgaW5pdGlhbFFzID0gWy4uLmluaXRpYWxRcywgZWxdXG4gICAgfSk7XG5cbiAgICBjbGlTZWxlY3Rpb24gPSBhd2FpdCBwcm9tcHQoaW5pdGlhbFFzKVxuICAgIHJldHVybiBjbGlTZWxlY3Rpb247XG4gICAgLy8gY29uc29sZS5sb2coJ2NsaVNlbGVjdGlvbiA6JywgSlNPTi5zdHJpbmdpZnkoY2xpU2VsZWN0aW9uKSlcbn1cblxuLyoqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIGNvbmZpZ19wYXRoIFxuICovXG5hc3luYyBmdW5jdGlvbiBfZ2V0X2Zyb21fY29uZmlnKGNvbmZpZ19wYXRoOiBzdHJpbmcpOiBQcm9taXNlPFByb21wdEFuc3dlcj4ge1xuICAgbGV0IGNvbmZpZ1NlbGVjdGlvbjogUHJvbXB0QW5zd2VyXG5cbiAgICBpZiAoaXNBYnNvbHV0ZShjb25maWdfcGF0aCkpe1xuICAgICAgICBjb25maWdTZWxlY3Rpb24gPSBKU09OLnBhcnNlKHJlYWRGaWxlU3luYyhjb25maWdfcGF0aCwgJ3V0Zi04JykudHJpbSgpKVxuICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbmZpZ1NlbGVjdGlvbiA9IEpTT04ucGFyc2UocmVhZEZpbGVTeW5jKHJlc29sdmUocHJvY2Vzcy5jd2QoKSwgY29uZmlnX3BhdGgpLCAndXRmLTgnKS50cmltKCkpXG4gICAgfVxuXG4gICAgcmV0dXJuIGNvbmZpZ1NlbGVjdGlvbjtcblxufVxuXG5hc3luYyBmdW5jdGlvbiBfc2VsZWN0X2Zsb3coc2VsZWN0aW9uOiBQcm9tcHRBbnN3ZXIpOiBQcm9taXNlPEV4aXRNZXNzYWdlPiB7XG4gICAgbGV0IGRldGVybWluZWRfY2hvaWNlID0gYCR7c2VsZWN0aW9uLnByb2plY3RfdHlwZX1fJHtzZWxlY3Rpb24ucGxhdGZvcm19XyR7c2VsZWN0aW9uLmRlcGxveW1lbnR9YFxuICAgIGNvbnN0IHdvcmtmbG93czogYW55ID0ge1xuICAgICAgICBzc3JfYWtzX2F6ZGV2b3BzOiBGbG93U2VsZWN0b3Iub3B0aW9uMVxuICAgIH1cbiAgICAgICAgXG4gICAgdHJ5IHtcbiAgICAgICAgbGV0IG1lc3NhZ2UgPSBhd2FpdCB3b3JrZmxvd3NbZGV0ZXJtaW5lZF9jaG9pY2VdKHNlbGVjdGlvbilcbiAgICAgICAgZXhpdE1lc3NhZ2UuY29kZSA9IDBcbiAgICAgICAgZXhpdE1lc3NhZ2UubWVzc2FnZSA9IG1lc3NhZ2VcbiAgICAgICAgLy8gcmV0dXJuIGV4aXRNZXNzYWdlXG5cbiAgICB9IGNhdGNoIChleCkge1xuICAgICAgICBleGl0TWVzc2FnZS5jb2RlID0gZXguY29kZSB8fCAtMVxuICAgICAgICBleGl0TWVzc2FnZS5tZXNzYWdlID0gZXgubWVzc2FnZVxuICAgIH1cbiAgICByZXR1cm4gZXhpdE1lc3NhZ2Vcbn1cblxuZXhwb3J0IHsgcnVuQ2xpIH1cbiJdfQ==