apiVersion: v1
kind: Namespace
metadata:
  name: dev-stacks-webapp
  labels:
    app.kubernetes.io/component: web
    app.kubernetes.io/name: xx-replace-me
    app.kubernetes.io/part-of: stacks

---

apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    app.kubernetes.io/instance: stacks-webapp-template
    app.kubernetes.io/version: 0.0.713-master
    applicationId: stacks/webapp-template
    applicationName: stacks-webapp-template
    customerID: amido
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/force-ssl-redirect: "false"
    nginx.ingress.kubernetes.io/rewrite-target: /$$2
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    owner: amido/stacks
    projectID: stacks
    version: 0.0.713-master
  labels:
    app.kubernetes.io/component: web
    app.kubernetes.io/name: xx-replace-me
    app.kubernetes.io/part-of: stacks
    environment: dev
  name: xx-replace-me
  namespace: dev-stacks-webapp
spec:
  rules:
  - host: app.nonprod.amidostacks.com
    http:
      paths:
      - backend:
          serviceName: xx-replace-me
          servicePort: 80
        path: /web/stacks(/|$)(.*)
  tls:
  - hosts:
    - nonprod.amidostacks.com

---

apiVersion: v1
kind: Service
metadata:
  annotations:
    app.kubernetes.io/instance: stacks-webapp-template
    app.kubernetes.io/version: 0.0.713-master
    applicationId: stacks/webapp-template
    applicationName: stacks-webapp-template
    customerID: amido
    owner: amido/stacks
    projectID: stacks
    version: 0.0.713-master
  labels:
    app.kubernetes.io/component: web
    app.kubernetes.io/name: xx-replace-me
    app.kubernetes.io/part-of: stacks
    environment: dev
  name: xx-replace-me
  namespace: dev-stacks-webapp
spec:
  type: ClusterIP
  ports:
  - port: 80
    protocol: TCP
    targetPort: http
  selector:
    app.kubernetes.io/component: web
    app.kubernetes.io/name: xx-replace-me
    app.kubernetes.io/part-of: stacks
    environment: dev
  sessionAffinity: None

---

apiVersion: v1
kind: Secret
metadata:
  name: appsecrets
  namespace: dev-stacks-webapp
type: Opaque
stringData:
  app_insights: df85a8db-a250-4a36-bb4b-3b778127e620
  next_public_token: 9L3ML2_zyQ2FrnFvuXeWES2wPWVqEnQj0Lx14UtAx4o
  next_preview_token: 4JrZBpD7-sDb_qjD4KB3Z34eNtCR1QqgvnCYlKqZ4Wg
  next_preview_secret: Stacks
  next_space_id: veka2or2977j

---

apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    app.kubernetes.io/instance: stacks-webapp-template
    app.kubernetes.io/version: 0.0.713-master
    applicationId: stacks/webapp-template
    applicationName: stacks-webapp-template
    customerID: amido
    owner: amido/stacks
    projectID: stacks
    version: 0.0.713-master
  labels:
    aadpodidbinding: stacks-webapp-identity
    app.kubernetes.io/component: web
    app.kubernetes.io/name: xx-replace-me
    app.kubernetes.io/part-of: stacks
    environment: dev
  name: xx-replace-me
  namespace: dev-stacks-webapp
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/component: web
      app.kubernetes.io/name: xx-replace-me
      app.kubernetes.io/part-of: stacks
      environment: dev
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      annotations:
        app.kubernetes.io/version: 0.0.713-master
        applicationId: stacks/webapp-template
        applicationName: stacks-webapp-template
        customerID: amido
        owner: amido/stacks
        projectID: stacks
        role: web
        version: 0.0.713-master
      labels:
        aadpodidbinding: stacks-webapp-identity
        app.kubernetes.io/component: web
        app.kubernetes.io/name: xx-replace-me
        app.kubernetes.io/part-of: stacks
        environment: dev
    spec:
      dnsPolicy: ClusterFirst
      containers:
        - name: web
          # this we need to pass from the pipeline to the deployment steps
          image: amidostacksnonproduksnode.azurecr.io/stacks-webapp:0.0.713-master
          imagePullPolicy: IfNotPresent
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: NODE_ENV
              value: production
            - name: LOG_LEVEL
              value: debug
            - name: PORT
              value: '3000'
            - name: MENU_API_URL
              value: http://dev.amidostacks.com/api/menu
            - name: APP_BASE_PATH
              value: ${FOO}
            - name: APP_BASE_URL
              value: https://app.nonprod.amidostacks.com
            - name: APPINSIGHTS_INSTRUMENTATIONKEY
              valueFrom:
                secretKeyRef:
                  name: appsecrets
                  key: app_insights
            - name: NEXT_PUBLIC_CONTENTFUL_ACCESS_TOKEN
              valueFrom:
                secretKeyRef:
                  name: appsecrets
                  key: next_public_token
            - name: NEXT_PUBLIC_CONTENTFUL_PREVIEW_ACCESS_TOKEN
              valueFrom:
                secretKeyRef:
                  name: appsecrets
                  key: next_preview_token
            - name: NEXT_PUBLIC_CONTENTFUL_PREVIEW_SECRET
              valueFrom:
                secretKeyRef:
                  name: appsecrets
                  key: next_preview_secret
            - name: NEXT_PUBLIC_CONTENTFUL_SPACE_ID
              valueFrom:
                secretKeyRef:
                  name: appsecrets
                  key: ${BAR}

          # # Remove limits and let the Pods container get the default (800cpu)
          # resources:
          #   limits:
          #     cpu: 600m
          #     memory: 500Mi
          #   requests:
          #     cpu: 400m
          #     memory: 350Mi

          ports:
            - name: http
              containerPort: 3000
          livenessProbe:
            failureThreshold: 10
            httpGet:
              path: /healthz
              port: 3000
              scheme: HTTP
              httpHeaders:
              - name: stacks-k8s-probe
                value: live
            initialDelaySeconds: 45
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 25
          readinessProbe:
            failureThreshold: 10
            httpGet:
              path: /healthz
              port: 3000
              scheme: HTTP
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 25
