#############################################################################################################################
# This is a generated file which includes some replacements.                                                                #
# It is still very much recommended to go through this and ensure all variables are correct for your business/domain        #
# All variables are defined in a global scope.                                                                              #
# All Terraform produced resource names are using a labels module ensuring a predictable naming convention                  #
# E.g.: variables for company, project, stage and component will produce a name of `$company-$project-$stage-$componenet`   #
# NB: Some resources e.g. blob storage only allow for alpha numeric characters so the name is adjusted accordingly          #
#  ==> `$company$project$stage$componenet`                                                                                  #
#############################################################################################################################
name: "$(build.sourcebranchname)-init"

pr: none

trigger:
  branches:
    include:
      - '*'
  paths:
    include:
      # REPLACE ME for custom paths if I am part of a bigger component 
      - 'netcore-api-v2/*'

resources:
  repositories:
    - repository: templates
      type: github
      name: amido/stacks-pipeline-templates
      ref: refs/tags/v1.3.0
      # EXCHANGE THIS FOR YOUR OWN ENDPOINT CONNECTION TO GITHUB
      # REPOSITORY IS PUBLIC
      endpoint: amidostacks

  containers:
    - container: sonar_scanner
      image: amidostacks/ci-sonarscanner:0.0.2
    - container: k8s_deploy
      image: amidostacks/ci-k8s:0.0.10
    - container: terraform_custom
      image: amidostacks/ci-tf:0.0.4

variables:
  company: amido
  project: stacks
  domain: api
  role: backend
  #
  # SelfConfig
  # If you haven't specified source_repo at cli runtime please ensure you replace it here
  # It is case sensitive for TFS based repos
  self_repo: stacks-webapp-template/packages/scaffolding-cli/templates # replaced by cli
  self_repo_src: src/api
  self_repo_tf_src: deploy/azure/app/kube
  self_generic_name: stacks-api
  # TF STATE CONFIG
  tf_state_rg: amido-stacks-rg-uks
  tf_state_storage: amidostackstfstategbl
  tf_state_container: tfstate
  # Stacks operates Terraform states based on workspaces **IT IS VERY IMPORTANT** that you ensure a unique name for each application definition
  # Furthermore **IT IS VERY IMPORTANT** that you change the name of a workspace for each deployment stage
  # there are some best practices around this if you are going for feature based environments
  # - we suggest you create a runtime variable that is dynamically set based on a branch currently running
  # **`terraform_state_workspace: `**
  # avoid running anything past dev that is not on master
  # sample value: company-webapp
  tf_state_key: %REPLACE_ME_FOR_UNIQUE_TF_STATE_KEY%
  # Versioning
  version_major: 0
  version_minor: 0
  version_revision: $[counter(variables['version_minor'], 0)]
  # Docker Config
  docker_dockerfile_path: "src/api"
  docker_image_name: $(self_generic_name)
  docker_image_tag: "$(version_major).$(version_minor).$(version_revision)-$(build.sourcebranchname)"
  docker_container_registry_name: %REPLACE_ME_FOR_DOCKER_REGISTRY_NAME%
  k8s_docker_registry: $(docker_container_registry_name).azurecr.io
  base_domain: nonprod.amidostacks.com
  base_domain_internal: nonprod.amidostacks.internal
  # DEFAULT IMAGE RUNNER
  pool_vm_image: ubuntu-18.04
  # Test setup
  code_coverage_cobertura_directory: coverage

stages:
  - stage: CI
    variables:
      # You can find notes in the READMEs around which values to use for each ENV variable group
      - group: amido-stacks-demo-infra
      - group: amido-stacks-demo-api
    jobs:
      - job: AppBuild
        pool:
          vmImage: ubuntu-18.04
        steps:
          - checkout: self
          - checkout: templates
            persistCredentials: true
          # BUILD NPM
          - template: templates/steps/build-netcore.yml
            parameters:
              dotnet_core_version: "3.1.x"
              # Docker Config
              docker_build: true
              # TODO: normalize this
              docker_build_additional_args: "."
              docker_workdir: $(Agent.BuildDirectory)/s/$(self_repo)/$(self_repo_src)
              docker_imagename: $(docker_image_name)
              docker_imagetag: $(docker_image_tag)
              docker_containerregistryname: $(docker_container_registry_name)
              # Vulnerability Scanning
              vulnerability_scan: false
              vulnerability_workdir: "$(Build.ArtifactStagingDirectory)"
              # Sonar settings
              static_code_analysis: true
              sonar_container: sonar_scanner
              sonar_run_properties: "/d:sonar.cs.opencover.reportsPaths=\"**/*.opencover.xml\" /d:sonar.exclusions=\"**/*Tests\" /d:sonar.coverage.exclusions=\"**/*Tests\""
              sonar_env: {
                SONAR_HOST_URL: "https://sonarcloud.io",
                SONAR_TOKEN: $SONAR_TOKEN,
                SONAR_PROJECT_KEY: $SONAR_PROJECT_KEY,
                SONAR_ORGANIZATION: $SONAR_ORGANIZATION,
                SONAR_PROJECT_NAME: $SONAR_PROJECT_NAME,
                BUILD_VERSION: $(docker_image_tag),
                SONAR_SCANNER_OPTS: ""
              }
              # Should be hardcoded in your sonar-project.properties file
              unit_test: true
              unit_test_project: "*UnitTests"
              component_test: true
              component_test_project: "*ComponentTests"
              # Enable once you have set up a dev or dedicated test db
              integration_test: true
              integration_test_project: "*IntegrationTests"
              integration_test_env: {
                COSMOSDB_KEY: $(COSMOSDB_KEY_DEV),
                CosmosDB__DatabaseName: $(COSMOSDB_NAME_DEV),
                CosmosDB__DatabaseAccountUri: $(COSMOSDB__ACCOUNT_URI_DEV)
              }
              contract_test: true
              contract_test_project: "*ContractTests"
              contract_test_env: {
                BUILD_NUMBER: $(docker_image_tag),
                PACT_BEARER_TOKEN: $(PACT_BEARER_TOKEN),
                BROKER_URL: $(PACT_BROKER)
              }
              test_arguments: "-v q /p:CollectCoverage=true /p:CoverletOutputFormat=opencover"
              project_root_dir: $(Pipeline.Workspace)/s/$(self_repo)/$(self_repo_src)
          # you can define additional steps here
      # you can define additional jobs here

  - stage: dev
    variables:
      - group: amido-stacks-demo-infra
      - group: amido-stacks-demo-api
    jobs:
      - job: AppInfraDev
        pool:
          vmImage: ubuntu-18.04
        container: terraform_custom
        steps:
          - checkout: self
          - checkout: templates
            persistCredentials: true
            env:
              ARM_SUBSCRIPTION_ID: $(azure_subscription_id)
              ARM_CLIENT_ID: $(azure_client_id)
              ARM_CLIENT_SECRET: $(azure_client_secret)
              ARM_TENANT_ID: $(azure_tenant_id)
          # Create TF infra
          - template: azDevOps/azure/templates/v2/steps/deploy-terraform-resource.yml@templates
            parameters:
              # Terraform Basic Config
              terraform_working_dir: '$(Agent.BuildDirectory)/s/$(self_repo)/$(self_repo_tf_src)'
              # changing this would require changing the downstream consumers of these outputs
              #
              terraform_output_artefact: 'tfoutputs'
              # Terraform State Config
              terraform_backend_client_id: $(azure_client_id)
              terraform_backend_client_secret: $(azure_client_secret)
              terraform_backend_tenant_id: $(azure_tenant_id)
              terraform_backend_subscription_id: $(azure_subscription_id)
              terraform_state_rg: $(tf_state_rg)
              terraform_state_storage: $(tf_state_storage)
              terraform_state_container: $(tf_state_container)
              terraform_state_key: $(tf_state_key)
              # for branch based builds this can be $(Build.SourceBranchName)
              terraform_state_workspace: dev
              # Global Config
              company: $(company)
              project: $(project)
              environment: ''
              azure_cli_providers: [
                { name: MSIPreview, namespace: Microsoft.ContainerService }
              ]
              # Azure config
              tags: ''
              # Terraform Resource Specific Config
              terraform_extra_properties: {
                TF_VAR_resource_group_location: uksouth,
                TF_VAR_resource_group_name: amido-stacks-nonprod-demo,
                TF_VAR_name_company: $(company),
                TF_VAR_name_project: $(project),
                TF_VAR_name_component: $(component),
                TF_VAR_create_cosmosdb: true,
                TF_VAR_name_environment: dev,
                TF_VAR_app_gateway_frontend_ip_name: amido-stacks-nonprod-demo,
                TF_VAR_dns_record: %REPLACE_ME_FOR_DNS_RECORD%,
                TF_VAR_dns_zone_name: $(base_domain),
                TF_VAR_internal_dns_zone_name: $(base_domain_internal)
              }
              terraform_output_commands: |
                raw_tf=$(terraform output -json | jq -r 'keys[] as $k | "##vso[task.setvariable variable=\($k);isOutput=true]\(.[$k] | .value)"')
                readarray -t outputs <<<"$raw_tf"
                for i in "${outputs[@]}"; do echo "$i"; done

      - deployment: DeployDev
        dependsOn: AppInfraDev
        container: k8s_deploy
        variables:
          cosmosdb_database_name: $[ dependencies.AppInfraDev.outputs['tfoutputs.cosmosdb_database_name'] ]
          cosmosdb_endpoint: $[ dependencies.AppInfraDev.outputs['tfoutputs.cosmosdb_endpoint'] ]
          cosmosdb_primary_master_key: $[ dependencies.AppInfraDev.outputs['tfoutputs.cosmosdb_primary_master_key'] ]
        pool:
          vmImage: ubuntu-18.04
        environment: dev
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                - checkout: templates
                  persistCredentials: true
                # Deploy Dev
                # TODO: change this to steps and feed upstream
                - template: azDevOps/azure/templates/v2/steps/aux-k8s-scripts.yml@templates
                  parameters:
                    scripts_dir: $(Agent.BuildDirectory)/s/stacks-pipeline-templates/azDevOps/azure/templates/v2

                - template: azDevOps/azure/templates/v2/steps/yaml-k8s-templater.yml@templates
                  parameters:
                    scripts_dir: $(Agent.BuildDirectory)/s/stacks-pipeline-templates/azDevOps/azure/templates/v2/scripts
                    shared_env_vars: {
                      namespace: $REPLACE_ME_FOR_NAMESPACE%,
                      role: $(role),
                      company: $(company),
                      project: $(project),
                      domain: $(domain),
                      component: api,
                      app_name: yumido-api-v2,
                      resource_def_name: %xx-replace-me%,
                      version: $(docker_image_tag),
                      environment: dev
                    }
                    # debug: "yes" # uncomment for debug and if you want to see the templated out file in the STDOUT of pipeline
                    template_input: [
                      {
                        base: $(Agent.BuildDirectory)/s/$(self_repo)/deploy/k8s/app/base_api-deploy.yml,
                        displayName: AppDeployment,
                        env_vars: {
                          dns_pointer: %REPLACE_ME_FOR_DNS_RECORD%.$(base_domain),
                          tls_domain: $(base_domain),
                          k8s_app_path: /api/menu,
                          log_level: "Debug",
                          k8s_image: '$(k8s_docker_registry)/$(docker_image_name):$(docker_image_tag)',
                          aadpodidentitybinding: stacks-webapp-identity,
                          app_insights_key: $(APPINSIGHTS_INSTRUMENTATIONKEY),
                          cosmosdb_key: $(cosmosdb_primary_master_key),
                          cosmosdb_endpoint: $(cosmosdb_endpoint),
                          cosmosdb_name: $(cosmosdb_database_name)
                        },
                        args: "-no-empty", # -no-unset is present by default
                      }
                    ]

                - template: azDevOps/azure/templates/v2/steps/deploy-k8s-app-kubectl.yml@templates
                  parameters:
                    scripts_dir: $(Agent.BuildDirectory)/s/stacks-pipeline-templates/azDevOps/azure/templates/v2/scripts
                    test_artefact: "tests"
                    test_baseurl: ""
                    functional_test: false
                    performance_test: false
                    smoke_test: false
                    # Kubernetes Config
                    kubernetes_clusterrg: amido-stacks-nonprod-demo
                    kubernetes_clustername: amido-stacks-nonprod-demo
                    # Mutation Information
                    kubectl_filepath:
                      - $(Agent.BuildDirectory)/s/$(self_repo)/deploy/k8s/app/api-deploy.yml
                    # ReleaseNote Information
                    releasenote: false
