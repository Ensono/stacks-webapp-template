parameters:
  pool:
    vmImage: "ubuntu-latest"
  versionSpec: 12.x
  project_root_dir: ""
  # Custom registry (eg. private)
  customRegistry: ""
  # Docker Config
  docker_build: true
  docker_build_generic: false
  docker_build_additional_args: ""
  docker_workdir: ""
  docker_imagename: ""
  docker_imagetag: ""
  docker_containerregistryname: ""
  docker_tag_args: ""
  # auth selection
  login_azure: false
  login_gke: false
  login_gcp: false
  login_gcr: false
  gcp_auth: {}
  # Vulnerability Scanning
  vulnerability_scan: false
  vulnerability_workdir: ""
  #  Static Code Analysis
  static_code_analysis: false
  sonar_container: ""
  # Linting and formatting validation
  lint_formatting: ""
  shared_eslint_config: ""
  # Testing
  unit_test: true
  contract_test: true
  audit_test: false
  contract_check_can_deploy: true
  cypress_e2e_test: true
  cypress_applitools_test: false
  cypress_e2e_env_vars: {}
  cache_cypress: false

steps:
  # Login to Azure/AKS
  - template: azDevOps/azure/templates/v2/steps/login-services.yml@templates
    parameters:
      # TODO: refactor this so we can keep on using the same step across providers
      azure_tenant_id: "$(azure_tenant_id)"
      azure_subscription_id: "$(azure_subscription_id)"
      azure_client_id: "$(azure_client_id)"
      azure_client_secret: "$(azure_client_secret)"
      login_azure: ${{ parameters.login_azure }}
      login_gcp: ${{ parameters.login_gcp }}
      login_gke: ${{ parameters.login_gke }}
      login_gcr: ${{ parameters.login_gcr }}
      gcp_auth: ${{ parameters.gcp_auth }}

  # # Audit dependencies
  # # ⚠️ IMPORTANT: Down to the user to ensure that the registry they are using
  # # can support `npm audit`
  - ${{ if eq(parameters.audit_test, true) }}:
      - template: azDevOps/azure/templates/v2/steps/build-audit-dependencies-node.yml@templates
        parameters:
          versionSpec: ${{ parameters.versionSpec }}
          workingDirectory: ${{ parameters.project_root_dir }}
          customRegistry: ${{ parameters.customRegistry }}

  # Install dependencies
  - template: azDevOps/azure/templates/v2/steps/build-install-dependencies-node.yml@templates
    parameters:
      versionSpec: ${{ parameters.versionSpec }}
      workingDirectory: ${{ parameters.project_root_dir }}
      customRegistry: ${{ parameters.customRegistry }}
      enable_cache: false

  # Linting and formatting validation
  - ${{ if eq(parameters.lint_formatting, true) }}:
      - template: azDevOps/azure/templates/v2/steps/test-static-validate-node.yml@templates
        parameters:
          versionSpec: ${{ parameters.versionSpec }}
          workingDirectory: ${{ parameters.project_root_dir }}
          lintingSharedConfigPackage: ${{ parameters.shared_eslint_config }}
          customRegistry: ${{ parameters.customRegistry }}

  # Linting and unit tests
  - ${{ if eq(parameters.unit_test, true) }}:
      - template: azDevOps/azure/templates/v2/steps/test-unit-node.yml@templates
        parameters:
          versionSpec: ${{ parameters.versionSpec }}
          workingDirectory: ${{ parameters.project_root_dir }}

  # SonarCloud
  - ${{ if eq(parameters.static_code_analysis, true) }}:
      - template: azDevOps/azure/templates/v2/steps/test-static-code-sonar.yml@templates
        parameters:
          working_directory: ${{ parameters.project_root_dir }}
          target_container: ${{ parameters.sonar_container }}

  # Consumer driven contract tests
  - ${{ if eq(parameters.contract_test, true) }}:
      - template: azDevOps/azure/templates/v2/steps/test-contract-pact.yml@templates
        parameters:
          versionSpec: ${{ parameters.versionSpec }}
          build_number: ${{ parameters.docker_imagetag }}
          workingDirectory: ${{ parameters.project_root_dir }}

  # Check with Pact broker if safe to proceed with deployment (breaking contract changes)
  - ${{ if and(eq(parameters.contract_test, true), eq(parameters.contract_check_can_deploy, true)) }}:
      - template: azDevOps/azure/templates/v2/steps/deploy-contract-pact-can-deploy.yml@templates
        parameters:
          workingDirectory: ${{ parameters.project_root_dir }}
          script: "npm run test:pact-can-i-deploy-ci"

  # Functional tests running on locally built and hosted (undeployed)
  - ${{ if eq(parameters.cypress_e2e_test, true) }}:
      - template: azDevOps/azure/templates/v2/steps/test-functional-cypress.yml@templates
        parameters:
          env_vars: ${{ parameters.cypress_e2e_env_vars}}
          workingDirectory: ${{ parameters.project_root_dir }}
          target_container: ${{ parameters.cypress_container }}

  # Visual regression tests running on locally built and hosted (undeployed)
  - ${{ if eq(parameters.cypress_applitools_test, true) }}:
      - task: ApplitoolsBuildTask@0
        displayName: "Tests: Visual Regression with Applitools"

  # Build Docker Image, Scan and Push to Repository
  - ${{ if eq(parameters.docker_build, true) }}:
      - template: azDevOps/azure/templates/v2/steps/build-container-image.yml@templates
        parameters:
          workingDirectory: ${{ parameters.docker_workdir }}
          docker_build_additional_args: ${{ parameters.docker_build_additional_args }}
          docker_imagename: ${{ parameters.docker_imagename }}
          docker_imagetag: ${{ parameters.docker_imagetag }}
          docker_containerregistryname: ${{ parameters.docker_containerregistryname }}

    # Build Docker Image, Scan and Push to Repository
  - ${{ if eq(parameters.docker_build_generic, true) }}:
      - template: azDevOps/azure/templates/v2/steps/build-container-image-generic.yml@templates
        parameters:
          working_directory: ${{ parameters.docker_workdir }}
          docker_build_additional_args: ${{ parameters.docker_build_additional_args }}
          docker_imagename: ${{ parameters.docker_imagename }}
          docker_imagetag: ${{ parameters.docker_imagetag }}
          docker_tag_args: ${{ parameters.docker_tag_args }}
          docker_containerregistryname: ${{ parameters.docker_containerregistryname }}
