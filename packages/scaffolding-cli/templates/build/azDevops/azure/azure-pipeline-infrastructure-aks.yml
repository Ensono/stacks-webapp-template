#############################################################################################################################
# This is a generated file which includes some replacements.                                                                #
# It is still very much recommended to go through this and ensure all variables are correct for your business/domain        #
# All variables are defined in a global scope.                                                                              #
# All Terraform produced resource names are using a labels module ensuring a predictable naming convention                  #
# E.g.: variables for company, project, stage and component will produce a name of `$company-$project-$stage-$componenet`   #
# NB: Some resources e.g. blob storage only allow for alpha numeric characters so the name is adjusted accordingly          #
#  ==> `$company$project$stage$componenet`                                                                                  #
#############################################################################################################################
name: '$(build.sourcebranchname)-init'

pr: none
trigger:
  branches:
    include:
    - '*'
  paths:
    include:
    - 'packages/scaffolding-cli/templates/build/*'
    - 'packages/scaffolding-cli/templates/deploy/*'

resources:
  repositories:
  - repository: templates
    type: github
    name: amido/stacks-pipeline-templates
    ref: refs/tags/v1.4.4
    endpoint: amidostacks
  containers:
  - container: k8s_deploy
    image: amidostacks/ci-k8s:0.0.10
  - container: terraform_custom
    image: amidostacks/ci-tf:0.0.4

variables:
  company: amido
  project: stacks
  domain: core
  component: sharedservices
  # Versioning
  version_major: 0
  version_minor: 0
  version_revision: $[counter(join(variables['version_major'], join('-', variables['version_minor'])), 0)]
  version_build_number: "$(version_major).$(version_minor).$(version_revision)-$(Build.SourceBranchName)"
  # SelfConfig
  self_repo: stacks-webapp-template/packages/scaffolding-cli/templates
  self_repo_tf_src: deploy/azure/infra/stacks-aks
  # TF STATE CONFIG
  tf_state_rg: amido-stacks-rg-uks
  tf_state_storage: amidostackstfstategbl
  tf_state_container: tfstate
  # Stacks operates Terraform states based on workspaces **IT IS VERY IMPORTANT** that you ensure a unique name for each application definition
  # Furthermore **IT IS VERY IMPORTANT** that you change the name of a workspace for each deployment stage
  # there are some best practices around this if you are going for feature based environments
  # - we suggest you create a runtime variable that is dynamically set based on a branch currently running
  # **`terraform_state_workspace: `** all states will be saved under this key for this definition
  # avoid running anything past dev that is not on master
  # sample value: sharedservices
  tf_state_key: core-sharedservices
  # Scripts directory used by pipeline steps
  scripts_dir: $(Agent.BuildDirectory)/s/stacks-pipeline-templates/azDevOps/azure/templates/v2/scripts
  # AKS/AZURE
  # This will always be predictably named by setting your company - project - stage - location - compnonent names above
  # IT IS SET per stage as an output to be consumed by deploy stage
  aks_cluster_version: "1.17.7"
  # DEFAULT IMAGE RUNNER
  pool_vm_image: ubuntu-18.04
  deployed_base_url: https://stacks-webapp.com/foo
  # Ensure you find this definition in the K8s and Azure steps to prefix with desired subdomain assignment
  base_domain: nonprod.amidostacks.com
  base_domain_internal: nonprod.amidostacks.internal

stages:
- stage: nonprod
  variables:
  # You can find notes in the READMEs around which values to use for each ENV variable group
  - group: amido-stacks-infra-credentials-nonprod
  jobs:
  - job: InfraNonProd
    variables:
      ARM_SUBSCRIPTION_ID: $(azure_subscription_id)
      ARM_CLIENT_ID: $(azure_client_id)
      ARM_CLIENT_SECRET: $(azure_client_secret)
      ARM_TENANT_ID: $(azure_tenant_id)
    pool:
      vmImage: ubuntu-18.04
    container: terraform_custom
    steps:
      - checkout: self
      - checkout: templates
        persistCredentials: true
      - bash: |
          echo '##vso[build.updatebuildnumber]$(version_build_number)'
        displayName: 'Update: Build Number'
      # Create TF infra
      - template: azDevOps/azure/templates/v2/steps/deploy-terraform-resource.yml@templates
        parameters:
          # Terraform Basic Config
          terraform_working_dir: '$(Agent.BuildDirectory)/s/$(self_repo)/$(self_repo_tf_src)'
          # changing this would require changing the downstream consumers of these outputs
          terraform_output_artefact: 'tfoutputs'
          # Terraform State Config
          terraform_backend_client_id: $(ARM_CLIENT_ID)
          terraform_backend_client_secret: $(ARM_CLIENT_SECRET)
          terraform_backend_tenant_id: $(ARM_TENANT_ID)
          terraform_backend_subscription_id: $(ARM_SUBSCRIPTION_ID)
          terraform_state_rg: $(tf_state_rg)
          terraform_state_storage: $(tf_state_storage)
          terraform_state_container: $(tf_state_container)
          terraform_state_key: $(tf_state_key)
          terraform_state_workspace: nonprod
          # Global Config
          company: 'amido'
          project: 'stacks'
          environment: ''
          azure_cli_providers: [
            { name: MSIPreview, namespace: Microsoft.ContainerService }
          ]
          # Azure config
          tags: ''
          # Terraform Resource Specific Config
          terraform_extra_properties: {
            TF_VAR_client_secret: $(azure_client_secret),
            TF_VAR_tenant_id: $(azure_tenant_id),
            TF_VAR_resource_group_location: northeurope,
            TF_VAR_name_company: $(company),
            TF_VAR_name_project: $(project),
            TF_VAR_name_component: $(domain),
            TF_VAR_name_environment: nonprod,
            TF_VAR_create_acr: true,
            TF_VAR_acme_email: "stacks@amido.com",
            TF_VAR_is_cluster_private: true,
            TF_VAR_cluster_version: $(aks_cluster_version),
            TF_VAR_stage: nonprod,
            TF_VAR_key_vault_name: "core-nonprod-vault",
            TF_VAR_dns_zone: $(base_domain),
            TF_VAR_internal_dns_zone: $(base_domain_internal)
          }
          terraform_output_commands: |
            raw_tf=$(terraform output -json | jq -r 'keys[] as $k | "##vso[task.setvariable variable=\($k | ascii_upcase);isOutput=true]\(.[$k] | .value)"')
            readarray -t outputs <<<"$raw_tf"
            for i in "${outputs[@]}"; do echo "$i"; done

  - job: K8sNonProd
    dependsOn: InfraNonProd
    variables:
      AKS_DEFAULT_USER_IDENTITY_CLIENT_ID: $[ dependencies.InfraNonProd.outputs['tfoutputs.AKS_DEFAULT_USER_IDENTITY_CLIENT_ID'] ]
      AKS_DEFAULT_USER_IDENTITY_ID: $[ dependencies.InfraNonProd.outputs['tfoutputs.AKS_DEFAULT_USER_IDENTITY_ID'] ]
      AKS_DEFAULT_USER_IDENTITY_NAME: $[ dependencies.InfraNonProd.outputs['tfoutputs.AKS_DEFAULT_USER_IDENTITY_NAME'] ]
      AKS_INGRESS_PUBLIC_IP: $[ dependencies.InfraNonProd.outputs['tfoutputs.AKS_INGRESS_PUBLIC_IP'] ]
      AKS_INGRESS_PRIVATE_IP: $[ dependencies.InfraNonProd.outputs['tfoutputs.AKS_INGRESS_PRIVATE_IP'] ]
      RESOURCE_GROUP: $[ dependencies.InfraNonProd.outputs['tfoutputs.RESOURCE_GROUP_NAME'] ]
      AKS_RESOURCE_GROUP: $[ dependencies.InfraNonProd.outputs['tfoutputs.AKS_RESOURCE_GROUP_NAME'] ]
      AKS_CLUSTER_NAME: $[ dependencies.InfraNonProd.outputs['tfoutputs.AKS_CLUSTER_NAME'] ]
      ACR_REGISTRY_NAME: $[ dependencies.InfraNonProd.outputs['tfoutputs.ACR_REGISTRY_NAME'] ]
      # if you have extended the infra definition and assigned output variables you can specify them here
    pool:
      vmImage: ubuntu-18.04
    container: k8s_deploy
    steps:
      - checkout: self
      - checkout: templates
        persistCredentials: true
        env:
          ARM_SUBSCRIPTION_ID: $(azure_subscription_id)
          ARM_CLIENT_ID: $(azure_client_id)
          ARM_CLIENT_SECRET: $(azure_client_secret)
          ARM_TENANT_ID: $(azure_tenant_id)
      #####
      # Sample left for base K8s cluster bootstrap
      #####
      - template: azDevOps/azure/templates/v2/steps/yaml-k8s-templater.yml@templates
        parameters: 
          scripts_dir: $(scripts_dir)
          enable_debug: "yes" # comment for debug and if you want to see the templated out file in the STDOUT of pipeline
          template_input: [
            {
              base: $(Agent.BuildDirectory)/s/$(self_repo)/build/k8s_manifests/aks/base_external-dns.yml, 
              out: $(Agent.BuildDirectory)/s/$(self_repo)/build/k8s_manifests/aks/external-dns.yml,
              displayName: ExternalDns,
              env_vars: {
                domain_filter: $(base_domain),
                aks_resource_group: $(AKS_RESOURCE_GROUP)
              },
              args: "-no-empty"
            },
            {
              base: $(Agent.BuildDirectory)/s/$(self_repo)/build/k8s_manifests/aks/base_aadpodidentity.yml,
              displayName: AADPodId,
              env_vars: {
                user_identity_id: $(AKS_DEFAULT_USER_IDENTITY_ID),
                identity_client_id: $(AKS_DEFAULT_USER_IDENTITY_CLIENT_ID),
                identity_user_name: $(AKS_DEFAULT_USER_IDENTITY_NAME)
              },
              args: "-no-empty"
            },
           {
              base: $(Agent.BuildDirectory)/s/$(self_repo)/build/k8s_manifests/aks/base_aadpodidentitybinding.yml, 
              displayName: AADPodIdBinding,
              env_vars: {
                identity_user_name: $(AKS_DEFAULT_USER_IDENTITY_NAME)
              },
              args: "-no-empty"
            },
           {
              base: $(Agent.BuildDirectory)/s/$(self_repo)/build/k8s_manifests/aks/base_nginx-ingress.yml,
              out: $(Agent.BuildDirectory)/s/$(self_repo)/build/k8s_manifests/aks/nginx-ingress.yml,
              displayName: NginxIngress,
              env_vars: {
                aks_ingress_ip: $(AKS_INGRESS_PRIVATE_IP),
                LB_IS_INTERNAL: "true"
              },
              args: "-no-empty"
            }
          ]

      - template: azDevOps/azure/templates/v2/steps/deploy-k8s-cluster.yml@templates
        parameters: 
          scripts_dir: $(scripts_dir)
          aks_cluster_name: $(AKS_CLUSTER_NAME)
          aks_resource_group_name: $(AKS_RESOURCE_GROUP)
          aks_dns_resource_group_name: $(AKS_RESOURCE_GROUP)
          aks_set_acr_perms: false
          aks_deploy_gatekeeper: false
          aks_aad_pod_identity: true
          aks_aad_pod_identity_yaml: {
            aad_id_yml: $(Agent.BuildDirectory)/s/$(self_repo)/build/k8s_manifests/aks/aadpodidentity.yml,
            aad_id_binding_yml: $(Agent.BuildDirectory)/s/$(self_repo)/build/k8s_manifests/aks/aadpodidentitybinding.yml
          }
          acr_name: $(docker_container_registry_name)
          acr_resource_group_name: $(AKS_RESOURCE_GROUP)
          ingress_definition:
            # TODO: make this a complex object so that additional args can be passed in
            - $(Agent.BuildDirectory)/s/$(self_repo)/build/k8s_manifests/aks/nginx-ingress.yml
          external_dns_yml: $(Agent.BuildDirectory)/s/$(self_repo)/build/k8s_manifests/aks/external-dns.yml
          domain_filter: $(base_domain)
