#############################################################################################################################
# This is a generated file which includes some replacements.                                                                #
# It is still very much recommended to go through this and ensure all variables are correct for your business/domain        #
# All variables are defined in a global scope.                                                                              #
# All Terraform produced resource names are using a labels module ensuring a predictable naming convention                  #
# E.g.: variables for company, project, stage and component will produce a name of `$company-$project-$stage-$componenet`   #
# NB: Some resources e.g. blob storage only allow for alpha numeric characters so the name is adjusted accordingly          #
#  ==> `$company$project$stage$componenet`                                                                                  #
#############################################################################################################################
name: "$(build.sourcebranchname)-init"

pr: none

trigger:
  branches:
    include:
    - '*'

  paths:
    include:
    - 'packages/scaffolding-cli/templates/*'

resources:
  repositories:
    - repository: templates
      type: github
      name: amido/stacks-pipeline-templates
      ref: feature/cycle2
      # EXCHANGE THIS FOR YOUR OWN ENDPOINT CONNECTION TO GITHUB
      # REPOSITORY IS PUBLIC 
      endpoint: amidostacks

  containers:
    - container: sonar_scanner
      image: amidostacks/ci-sonarscanner:0.0.1
    - container: k8s_deploy
      image: amidostacks/ci-k8s:0.0.7
    - container: terraform_custom
      image: amidostacks/ci-tf:0.0.3

variables:
  company: amido
  project: stacks
  domain: csr
  role: frontend
  #
  # SelfConfig
  # If you haven't specified source_repo at cli runtime please ensure you replace it here 
  # It is case sensitive for TFS based repos
  self_repo: stacks-webapp-template/packages/scaffolding-cli/templates
  self_repo_src: src/csr
  self_repo_tf_src: deploy/azure/app/csr
  self_generic_name: stacks-webapp
  # TF STATE CONFIG
  tf_state_rg: amido-stacks-rg-uks
  tf_state_storage: amidostackstfstategbl
  tf_state_container: tfstate
  # Stacks operates Terraform states based on workspaces **IT IS VERY IMPORTANT** that you ensure a unique name for each application definition
  # Furthermore **IT IS VERY IMPORTANT** that you change the name of a workspace for each deployment stage
  # there are some best practices around this if you are going for feature based environments
  # - we suggest you create a runtime variable that is dynamically set based on a branch currently running
  # **`terraform_state_workspace: `** 
  # avoid running anything past dev that is not on master
  # sample value: company-webapp
  tf_state_key: stacks-webapp-csr
  # Versioning
  version_major: 0
  version_minor: 0
  version_revision: $[counter(variables['version_minor'], 0)]
  # BUILD ARTIFACTS across stages
  build_artifact_deploy_path: $(Agent.BuildDirectory)/s/$(self_repo)/src/csr
  build_artifact_deploy_name: $(self_generic_name)
  # Networking
  base_domain: nonprod.amidostacks.com
  pool_vm_image: ubuntu-18.04

stages:
  - stage: CI
    variables:
      # You can find notes in the READMEs around which values to use for each ENV variable group
      - group: amido-stacks-infra-credentials-nonprod
      - group: amido-stacks-webapp-csr
    jobs:
      - job: WebAppBuild
        pool:
          vmImage: ubuntu-18.04
        steps:
          - checkout: self
          - checkout: templates
            persistCredentials: true
            target: k8s_deploy
          # BUILD NPM
          - template: templates/steps/build-csr.yml
            parameters:
              # Docker Config
              login_azure: true
              # Vulnerability Scanning
              vulnerability_scan: false
              vulnerability_workdir: "$(Build.ArtifactStagingDirectory)"
              # Sonar settings
              static_code_analysis: true
              #Linting and formatting validation
              shared_eslint_config: "@amidostacks/eslint-config@latest"
              # Should be hardcoded in your sonar-project.properties file
              unit_test: true
              project_root_dir: $(Agent.BuildDirectory)/s/$(self_repo)/$(self_repo_src)
              cypress_e2e_test: false
              cypress_e2e_env_vars:
                PORT: 3000
                APP_BASE_URL: "http://localhost"
                MENU_API_URL: "https://api.demo.nonprod.amidostacks.com/api/menu"
                APP_BASE_PATH: ""
                NODE_ENV: dev
                # avoid warnings about terminal
                TERM: xterm
              # Build Output File
              # files to be persisted across stages
              build_file: true
              build_file_path: $(build_artifact_deploy_path)
              build_file_artefact: $(build_artifact_deploy_name)
          # you can define additional steps here
      # you can define additional jobs here

  - stage: dev
    variables:
      - group: amido-stacks-infra-credentials-nonprod
      - group: amido-stacks-webapp-csr
    jobs:
      - job: AppInfraDev
        variables:
          foo: bar 
        pool:
          vmImage: ubuntu-18.04
        container: terraform_custom
        steps:
          - checkout: self
          - checkout: templates
            persistCredentials: true
            env:
              ARM_SUBSCRIPTION_ID: $(azure_subscription_id)
              ARM_CLIENT_ID: $(azure_client_id)
              ARM_CLIENT_SECRET: $(azure_client_secret)
              ARM_TENANT_ID: $(azure_tenant_id)
            # target: terraform_custom
            target:
              container: terraform_custom
          # Create TF infra
          - template: azDevOps/azure/templates/v2/steps/login-services.yml@templates
            parameters: 
              login_azure: true
              azure_tenant_id: $(azure_tenant_id)
              azure_subscription_id: $(azure_subscription_id)
              azure_client_id: $(azure_client_id)
              azure_client_secret: $(azure_client_secret)

          - template: azDevOps/azure/templates/v2/steps/deploy-terraform-meta-generic.yml@templates
            parameters: 
              # Terraform Basic Config
              working_dir: '$(Agent.BuildDirectory)/s/$(self_repo)/$(self_repo_tf_src)'
              # changing this would require changing the downstream consumers of these outputs
              # 
              terraform_output_artefact: 'tfoutputs'
              #Auth config
              terraform_auth_properties: {
                ARM_CLIENT_ID: $(azure_client_id),
                ARM_CLIENT_SECRET: $(azure_client_secret),
                ARM_SUBSCRIPTION_ID: $(azure_subscription_id),
                ARM_TENANT_ID: $(azure_tenant_id)
              }
              # Terraform State Config
              terraform_init_backend_config: '-backend-config="key=$(tf_state_key)" -backend-config="storage_account_name=$(tf_state_storage)" -backend-config="resource_group_name=$(tf_state_rg)" -backend-config="container_name=$(tf_state_container)"'
              terraform_state_workspace: dev
              tags: ''
              # Terraform Resource Specific Config
              terraform_extra_properties: {
                TF_VAR_resource_group_location: uksouth,
                TF_VAR_name_company: $(company),
                TF_VAR_name_project: $(project),
                TF_VAR_name_component: $(domain),
                TF_VAR_name_environment: dev,
                TF_VAR_name_stage: dev,
                TF_VAR_dns_zone: nonprod.amidostacks.com,
                TF_VAR_dns_record: csr-app,
                TF_VAR_create_dns_zone: false,
                TF_VAR_dns_resource_group: amido-stacks-nonprod-uks-node,
                TF_VAR_response_header_cdn: '[
                  {
                    action: "Append",
                    name: "Content-Security-Policy",
                    value: "default-src * ''unsafe-inline'' ''unsafe-eval''"
                  },
                  {
                    action:"Append",
                    name: "Cache-Control",
                    value: "no-cache"
                  },
                  {
                    action: "Append",
                    name: "X-Frame-Options",
                    value: "SAMEORIGIN"
                  },
                  {
                    action: "Append",
                    name: "X-Content-Type-Options",
                    value: "nosniff"
                  },
                  {
                    action: "Append",
                    name: "Strict-Transport-Security",
                    value: "max-age=63072000"
                  },
                  {
                    action: "Append",
                    name: "Referrer-Policy",
                    value: "no-referrer-when-downgrade"
                  }
                ]'
              }
              terraform_output_commands: |
                raw_tf=$(terraform output -json | jq -r 'keys[] as $k | "##vso[task.setvariable variable=\($k);isOutput=true]\(.[$k] | .value)"')
                readarray -t outputs <<<"$raw_tf"
                for i in "${outputs[@]}"; do echo "$i"; done

      - deployment: DeployDev
        dependsOn: AppInfraDev
        container: k8s_deploy
        variables:
          storage_account_name: $[ dependencies.AppInfraDev.outputs['tfoutputs.storage_account_name'] ]
          storage_account_key: $[ dependencies.AppInfraDev.outputs['tfoutputs.storage_account_key'] ]
          dns_name: $[ dependencies.AppInfraDev.outputs['tfoutputs.dns_name'] ]
        pool:
          vmImage: ubuntu-18.04
        environment: dev
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                - checkout: templates
                  persistCredentials: true
                  target: k8s_deploy
                # Deploy Dev
                # TODO: change this to steps and feed upstream
                - template: azDevOps/azure/templates/v2/steps/deploy-csr-azure.yml@templates
                  parameters:
                    build_artifact: $(build_artifact_deploy_name)
                    storage_account_name: $(storage_account_name)
                    storage_account_key: $(storage_account_key)
                    build_command: 'npm run build'
                    build_vars: {
                      NODE_ENV: production,
                      MENU_API_URL: "https://app.nonprod.amidostacks.com/web/stacks",
                      APPINSIGHTS_INSTRUMENTATIONKEY: $(APPINSIGHTS_INSTRUMENTATIONKEY)
                    }
                    build_out: './dist'
