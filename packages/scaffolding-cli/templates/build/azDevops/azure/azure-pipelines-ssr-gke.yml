#############################################################################################################################
# This is a generated file which includes some replacements.                                                                #
# It is still very much recommended to go through this and ensure all variables are correct for your business/domain        #
# All variables are defined in a global scope.                                                                              #
# All Terraform produced resource names are using a labels module ensuring a predictable naming convention                  #
# E.g.: variables for company, project, stage and component will produce a name of `$company-$project-$stage-$componenet`   #
# NB: Some resources e.g. blob storage only allow for alpha numeric characters so the name is adjusted accordingly          #
#  ==> `$company$project$stage$componenet`                                                                                  #
#############################################################################################################################
name: "$(build.sourcebranchname)-init"

pr: none

trigger:
  branches:
    include:
      - '*'

  paths:
    include:
      - 'packages/scaffolding-cli/templates/deploy/gcp/*'


resources:
  repositories:
    - repository: templates
      type: github
      name: amido/stacks-pipeline-templates
      ref: feature/cycle2
      # EXCHANGE THIS FOR YOUR OWN ENDPOINT CONNECTION TO GITHUB
      # REPOSITORY IS PUBLIC
      endpoint: amidostacks

  containers:
    - container: sonar_scanner
      image: amidostacks/ci-sonarscanner:0.0.1
    - container: k8s_deploy
      image: amidostacks/ci-k8s:0.0.8
    - container: terraform_custom
      image: amidostacks/ci-tf:0.0.3

variables:
  company: amido
  project: stacks
  domain: node
  role: frontend
  #
  # SelfConfig
  # If you haven't specified source_repo at cli runtime please ensure you replace it here
  # It is case sensitive for TFS based repos
  self_repo: stacks-webapp-template/packages/scaffolding-cli/templates
  self_repo_src: src/ssr
  self_repo_tf_src: deploy/gcp/app/kube
  self_generic_name: stacks-webapp
  # TF STATE CONFIG
  tf_state_rg: amido-stacks-rg-uks
  tf_state_storage: amidostackstfstategbl
  tf_state_container: tfstate
  # Stacks operates Terraform states based on workspaces **IT IS VERY IMPORTANT** that you ensure a unique name for each application definition
  # Furthermore **IT IS VERY IMPORTANT** that you change the name of a workspace for each deployment stage
  # there are some best practices around this if you are going for feature based environments
  # - we suggest you create a runtime variable that is dynamically set based on a branch currently running
  # **`terraform_state_workspace: `**
  # avoid running anything past dev that is not on master
  # sample value: company-webapp
  tf_state_key: node-app
  # Versioning
  version_major: 0
  version_minor: 0
  version_revision: $[counter(join(variables['version_major'], join('-', variables['version_minor'])), 0)]
  # Docker Config
  docker_dockerfile_path: "src/"
  docker_image_name: $(self_generic_name)
  docker_image_tag: "$(version_major).$(version_minor).$(version_revision)-$(Build.SourceBranchName)"
  docker_container_registry_name: eu.gcr.io/$(gcp_project_id)
  # BUILD ARTIFACTS across stages
  build_artifact_deploy_path: $(Agent.BuildDirectory)/s/$(self_repo)/deploy/k8s/app
  build_artifact_deploy_name: $(self_generic_name)
  # AKS/AZURE
  # This will always be predictably named by setting your company - project - INFRAstage - location - compnonent names in the infra-pipeline
  gcp_region: europe-west2
  gcp_project_name: amido-stacks
  gcp_project_id: amido-stacks
  gcp_cluster_name: $(company)-$(project)-nonprod-gke-infra
  # Infra
  conventional_resource_namer: $(company)-$(project)-nonprod-uks-$(domain)
  base_domain: gke.nonprod.amidostacks.com
  # Dynamic vars for downstream purposes
  # tf_workspace_suffix: $[]
  # dns_suffix: ""
  # DEFAULT IMAGE RUNNER
  pool_vm_image: ubuntu-18.04
  # Test setup
  # ADD Vars here
  # TestCafe E2E Tests
  testcafe_e2e_test: false
  # Lighthouse Audit
  lighthouse_audit: false

stages:
  - stage: CI
    variables:
      # You can find notes in the READMEs around which values to use for each ENV variable group
      - group: amido-stacks-infra-credentials-nonprod
      - group: amido-stacks-webapp
    jobs:
      - job: WebAppBuild
        pool:
          vmImage: ubuntu-18.04
        container: k8s_deploy
        steps:
          - checkout: self
          - checkout: templates
            persistCredentials: true
          # BUILD NPM
          - template: templates/steps/build-node.yml
            parameters:
              # Docker Config
              build_on_server: false
              docker_build: false
              docker_build_generic: true
              gcp_auth: {
                CLOUDSDK_COMPUTE_REGION: $(gcp_region),
                CLOUDSDK_CONTAINER_CLUSTER: $(company)-$(project)-nonprod-gke-infra,
                CLOUDSDK_CORE_PROJECT: $(gcp_project_id),
                CLOUDSDK_CORE_DISABLE_PROMPTS: "True"
              }
              login_azure: false
              login_gke: true
              login_gcp: true
              login_gcr: true
              # TODO: normalize this
              docker_build_additional_args: "."
              docker_workdir: $(Agent.BuildDirectory)/s/$(self_repo)/$(self_repo_src)
              docker_imagename: $(docker_image_name)
              docker_imagetag: $(docker_image_tag)
              docker_containerregistryname: $(docker_container_registry_name)
              docker_tag_args: "-t $(docker_container_registry_name)/$(docker_image_name):$(docker_image_tag) \
                -t $(docker_container_registry_name)/$(docker_image_name):latest"
              # Vulnerability Scanning
              vulnerability_scan: false
              vulnerability_workdir: "$(Build.ArtifactStagingDirectory)"
              # Sonar settings
              static_code_analysis: false
              sonar_container: sonar_scanner
              #Linting and formatting validation
              lint_formatting: false
              shared_eslint_config: "@amidostacks/eslint-config@latest"
              # Should be hardcoded in your sonar-project.properties file
              unit_test: false
              project_root_dir: $(Agent.BuildDirectory)/s/$(self_repo)/$(self_repo_src)
              unit_test_project: "$(Test.UnitTestProjectPath)"
              component_test: false
              component_test_project: "$(Test.ComponentTestProjectPath)"
              cypress_e2e_test: false
              cypress_applitools_test: false
              cypress_e2e_env_vars:
                PORT: 3000
                APP_BASE_URL: "http://localhost"
                MENU_API_URL: "https://api.demo.nonprod.amidostacks.com/api/menu"
                APP_BASE_PATH: ""
                NODE_ENV: dev
                # avoid warnings about terminal
                TERM: xterm
              # Build Output File
              # files to be persisted across stages
              build_file: false
              build_file_path: $(build_artifact_deploy_path)
              build_file_artefact: $(build_artifact_deploy_name)
              # Git Tag release
              git_do_tag_release: false
              git_release_tag: "$(version_major).$(version_minor).$(version_revision)-$(build.sourcebranchname)"
          # you can define additional steps here
      # you can define additional jobs here

  - stage: dev
    variables:
      - group: amido-stacks-infra-credentials-nonprod
      - group: amido-stacks-webapp
    jobs:
      - job: AppInfraDev
        variables:
          foo: bar
        pool:
          vmImage: ubuntu-18.04
        container: terraform_custom
        steps:
          - checkout: self
          - checkout: templates
            persistCredentials: true
            env:
              ARM_SUBSCRIPTION_ID: $(azure_subscription_id)
              ARM_CLIENT_ID: $(azure_client_id)
              ARM_CLIENT_SECRET: $(azure_client_secret)
              ARM_TENANT_ID: $(azure_tenant_id)
            # target: terraform_custom
            target:
              container: terraform_custom
          # Create TF infra
          - template: azDevOps/azure/templates/v2/steps/deploy-terraform-meta-generic.yml@templates
            parameters:
              # Terraform Basic Config
              working_dir: '$(Agent.BuildDirectory)/s/$(self_repo)/$(self_repo_tf_src)'
              # changing this would require changing the downstream consumers of these outputs
              #
              terraform_output_artefact: 'tfoutputs'
              #Auth config
              terraform_auth_properties: {
                ARM_CLIENT_ID: $(azure_client_id),
                ARM_CLIENT_SECRET: $(azure_client_secret),
                ARM_SUBSCRIPTION_ID: $(azure_subscription_id),
                ARM_TENANT_ID: $(azure_tenant_id),
                GOOGLE_CREDENTIALS: $(GOOGLE_CREDENTIALS)
              }
              # Terraform State Config
              terraform_init_backend_config: '-backend-config="key=$(tf_state_key)" -backend-config="storage_account_name=$(tf_state_storage)" -backend-config="resource_group_name=$(tf_state_rg)" -backend-config="container_name=$(tf_state_container)"'
              terraform_state_workspace: dev
              # Global Config
              tags: ''
              # Terraform Resource Specific Config
              terraform_extra_properties: {
                TF_VAR_project: $(gcp_project_name),
                TF_VAR_location: $(gcp_region),
                TF_VAR_region: $(gcp_region),
                TF_VAR_name_company: $(company),
                TF_VAR_name_project: $(project),
                TF_VAR_name_component: $(component),
                TF_VAR_name_environment: dev,
                TF_VAR_name_stage: dev,
                TF_VAR_ingress_ip_name: amido-stacks-nonprod-gke-infra-ingress-public,
                TF_VAR_dns_record: app,
                TF_VAR_dns_zone_name: amido-stacks-nonprod-gke-infra,
              }
              terraform_output_commands: ""

      - deployment: DeployDev
        dependsOn: AppInfraDev
        container: k8s_deploy
        variables:
          GLOBAL_VAR: FOO
        pool:
          vmImage: ubuntu-18.04
        environment: dev
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                - checkout: templates
                  persistCredentials: true
                # Deploy Dev
                # TODO: change this to steps and feed upstream
                - template: azDevOps/azure/templates/v2/steps/aux-k8s-scripts.yml@templates
                  parameters:
                    scripts_dir: $(Agent.BuildDirectory)/s/stacks-pipeline-templates/azDevOps/azure/templates/v2

                - template: azDevOps/azure/templates/v2/steps/yaml-k8s-templater.yml@templates
                  parameters:
                    scripts_dir: $(Agent.BuildDirectory)/s/stacks-pipeline-templates/azDevOps/azure/templates/v2/scripts
                    template_input: [
                      {
                        base: $(Agent.BuildDirectory)/s/$(self_repo)/deploy/k8s/app/base_gke-app-deploy.yml,
                        out: $(Agent.BuildDirectory)/s/$(self_repo)/deploy/k8s/app/app-deploy.yml,
                        displayName: AppDeployment,
                        env_vars: {
                          namespace: dev-stacks-webapp,
                          dns_pointer: app.$(base_domain),
                          tls_domain: $(base_domain),
                          k8s_app_path: '/',
                          k8s_image: '$(docker_container_registry_name)/$(docker_image_name):$(docker_image_tag)',
                          version: $(docker_image_tag),
                          role: $(role),
                          company: $(company),
                          ingress_ip_name: amido-stacks-nonprod-gke-infra-ingress-public,
                          project: $(project),
                          domain: $(domain),
                          component: web,
                          app_name: webapp-template,
                          resource_def_name: node-app,
                          environment: dev,
                          app_insights_key: $(APPINSIGHTS_INSTRUMENTATIONKEY)
                        }
                      }
                    ]

                - template: azDevOps/azure/templates/v2/steps/deploy-k8s-app-kubectl-generic.yml@templates
                  parameters:
                    environment: "dev"
                    login_gcp: true
                    login_gke: true
                    gcp_auth: {
                      CLOUDSDK_COMPUTE_REGION: $(gcp_region),
                      CLOUDSDK_CONTAINER_CLUSTER: $(gcp_cluster_name),
                      CLOUDSDK_CORE_PROJECT: $(gcp_project_id),
                      CLOUDSDK_CORE_DISABLE_PROMPTS: "True"
                    }
                    # ONLY USED FOR kubectl apply
                    cluster_name: $(gcp_cluster_name)
                    deployment_defs:
                      - { name: app_deploy, file: $(Agent.BuildDirectory)/s/$(self_repo)/deploy/k8s/app/app-deploy.yml, context: ""}
                    scripts_dir: $(Agent.BuildDirectory)/s/stacks-pipeline-templates/azDevOps/azure/templates/v2/scripts
                    appinsights_enabled: false
            on:
              success:
                pool:
                  vmImage: windows-2019
                steps:
                  - checkout: self
                  - checkout: templates
                  # Functional tests running on deployed webapp
                  - ${{ if eq(variables.testcafe_e2e_test, true) }}:
                      - template: azDevOps/azure/templates/v2/steps/test-functional-testcafe.yml@templates
                        parameters:
                          env_vars:
                            APP_BASE_URL: "https://app.$(base_domain)"
                            MENU_API_URL: "http://dev.amidostacks.com/api/menu"
                            APP_BASE_PATH: "/web/stacks"
                            NODE_ENV: production
                          workingDirectory: $(Agent.BuildDirectory)/s/$(self_repo)/test/testcafe
                          testcafe_browser_list: "chrome,firefox"
                  - ${{ if eq(variables.lighthouse_audit, true) }}:
                      - task: Lighthouse@1
                        inputs:
                          url: "https://app.$(base_domain)/web/stacks"
