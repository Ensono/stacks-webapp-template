apiVersion: v1
kind: Namespace
metadata:
  name: ${namespace}
  labels:
    app.kubernetes.io/component: ${component}
    app.kubernetes.io/name: ${resource_def_name}
    app.kubernetes.io/part-of: ${project}

---

apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    app.kubernetes.io/instance: ${project}-${app_name}
    app.kubernetes.io/version: ${version}
    applicationId: ${project}/${app_name}
    applicationName: ${project}-${app_name}
    customerID: ${company}
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/force-ssl-redirect: "false"
    nginx.ingress.kubernetes.io/rewrite-target: /$2
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    owner: ${company}/${project}
    projectID: ${project}
    version: ${version}
  labels:
    app.kubernetes.io/component: ${component}
    app.kubernetes.io/name: ${resource_def_name}
    app.kubernetes.io/part-of: ${project}
    environment: ${environment}
  name: ${resource_def_name}
  namespace: ${namespace}
spec:
  rules:
  - host: ${dns_pointer}
    http:
      paths:
      - backend:
          serviceName: ${resource_def_name}
          servicePort: 80
        path: ${k8s_app_path}(/|$)(.*)
  tls:
  - hosts:
    - ${tls_domain}

--- 

apiVersion: v1
kind: Service
metadata:
  annotations:
    app.kubernetes.io/instance: ${project}-${app_name}
    app.kubernetes.io/version: ${version}
    applicationId: ${project}/${app_name}
    applicationName: ${project}-${app_name}
    customerID: ${company}
    owner: ${company}/${project}
    projectID: ${project}
    version: ${version}
  labels:
    app.kubernetes.io/component: ${component}
    app.kubernetes.io/name: ${resource_def_name}
    app.kubernetes.io/part-of: ${project}
    environment: ${environment}
  name: ${resource_def_name}
  namespace: ${namespace}
spec:
  type: ClusterIP
  ports:
  - port: 80
    protocol: TCP
    targetPort: http
  selector:
    app.kubernetes.io/component: ${component}
    app.kubernetes.io/name: ${resource_def_name}
    app.kubernetes.io/part-of: ${project}
    environment: ${environment}
  sessionAffinity: None

---

apiVersion: v1
kind: Secret
metadata:
  name: cosmosdb
  namespace: ${namespace}
type: Opaque
stringData:
  key: ${cosmosdb_key}

---

apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    app.kubernetes.io/instance: ${project}-${app_name}
    app.kubernetes.io/version: ${version}
    applicationId: ${project}/${app_name}
    applicationName: ${project}-${app_name}
    customerID: ${company}
    owner: ${company}/${project}
    projectID: ${project}
    version: ${version}
  labels:
    aadpodidbinding: ${aadpodidentitybinding}
    app.kubernetes.io/component: ${component}
    app.kubernetes.io/name: ${resource_def_name}
    app.kubernetes.io/part-of: ${project}
    environment: ${environment}
  name: ${resource_def_name}
  namespace: ${namespace}
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/component: ${component}
      app.kubernetes.io/name: ${resource_def_name}
      app.kubernetes.io/part-of: ${project}
      environment: ${environment}
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      annotations:
        app.kubernetes.io/version: ${version}
        applicationId: ${project}/${app_name}
        applicationName: ${project}-${app_name}
        customerID: ${company}
        owner: ${company}/${project}
        projectID: ${project}
        role: web
        version: ${version}
      labels:
        aadpodidbinding: ${aadpodidentitybinding}
        app.kubernetes.io/component: ${component}
        app.kubernetes.io/name: ${resource_def_name}
        app.kubernetes.io/part-of: ${project}
        environment: ${environment}
    spec:
      dnsPolicy: ClusterFirst
      containers:
        - name: web
          # this we need to pass from the pipeline to the deployment steps
          image: ${k8s_image}
          imagePullPolicy: IfNotPresent
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: API_BASEPATH
              value: /api/menu
            - name: COSMOSDB_KEY
              valueFrom:
                secretKeyRef:
                  name: cosmosdb
                  key: key
            - name: LOG_LEVEL
              value: debug

            - name: APPINSIGHTS_INSTRUMENTATIONKEY
              value: ${APPINSIGHTS_INSTRUMENTATIONKEY}
              # valueFrom:
              #   secretKeyRef:
              #     name: appinsights
              #     key: INSTRUMENTATIONKEY

          # # Remove limits and let the Pods container get the default (800cpu)
          # resources:
          #   limits:
          #     cpu: 600m
          #     memory: 500Mi
          #   requests:
          #     cpu: 400m
          #     memory: 350Mi

          ports:
            - name: http
              containerPort: 80
          livenessProbe:
            failureThreshold: 10
            httpGet:
              path: /health
              port: 80
              scheme: HTTP
            initialDelaySeconds: 45
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 25
          readinessProbe:
            failureThreshold: 10
            httpGet:
              path: /health
              port: 80
              scheme: HTTP
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 25
