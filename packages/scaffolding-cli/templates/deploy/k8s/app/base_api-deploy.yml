apiVersion: v1
kind: Namespace
metadata:
  name: ${namespace}
  labels:
    app.kubernetes.io/component: ${component}
    app.kubernetes.io/name: ${resource_def_name}
    app.kubernetes.io/part-of: ${project}

---

apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    app.kubernetes.io/instance: ${project}-${app_name}
    app.kubernetes.io/version: ${version}
    applicationId: ${project}/${app_name}
    applicationName: ${project}-${app_name}
    customerID: ${company}
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/force-ssl-redirect: "false"
    nginx.ingress.kubernetes.io/rewrite-target: /$2
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    owner: ${company}/${project}
    projectID: ${project}
    version: ${version}
  labels:
    app.kubernetes.io/component: ${component}
    app.kubernetes.io/name: ${resource_def_name}
    app.kubernetes.io/part-of: ${project}
    environment: ${environment}
  name: ${resource_def_name}
  namespace: ${namespace}
spec:
  rules:
  - host: ${dns_pointer}
    http:
      paths:
      - backend:
          serviceName: ${resource_def_name}
          servicePort: 80
        path: ${k8s_app_path}(/|$)(.*)
  tls:
  - hosts:
    - ${tls_domain}

---

apiVersion: v1
kind: Service
metadata:
  annotations:
    app.kubernetes.io/instance: ${project}-${app_name}
    app.kubernetes.io/version: ${version}
    applicationId: ${project}/${app_name}
    applicationName: ${project}-${app_name}
    customerID: ${company}
    owner: ${company}/${project}
    projectID: ${project}
    version: ${version}
  labels:
    app.kubernetes.io/component: ${component}
    app.kubernetes.io/name: ${resource_def_name}
    app.kubernetes.io/part-of: ${project}
    environment: ${environment}
  name: ${resource_def_name}
  namespace: ${namespace}
spec:
  type: ClusterIP
  ports:
  - port: 80
    protocol: TCP
    targetPort: http
  selector:
    app.kubernetes.io/component: ${component}
    app.kubernetes.io/name: ${resource_def_name}
    app.kubernetes.io/part-of: ${project}
    environment: ${environment}
  sessionAffinity: None

---

apiVersion: v1
kind: Secret
metadata:
  name: appsecrets
  namespace: ${namespace}
type: Opaque
stringData:
  cosmos_key: ${cosmosdb_key}
  app_insights: ${app_insights_key}

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: appsettings
  namespace: ${namespace}
data:
  appsettings.json: |
    {
      "Serilog": {
          "Using": [
              "Serilog.Sinks.Console",
              "Serilog.Sinks.ApplicationInsights"
          ],
          "MinimumLevel": {
              "Default": "${log_level}",
              "Override": {}
          },
          "WriteTo": [
              { "Name": "Console" },
              {
                  "Name": "ApplicationInsights",
                  "Args": {
                      "telemetryConverter": "Serilog.Sinks.ApplicationInsights.Sinks.ApplicationInsights.TelemetryConverters.TraceTelemetryConverter, Serilog.Sinks.ApplicationInsights"
                  }
              }
          ],
          "Enrich": [ "FromLogContext", "WithMachineName", "WithThreadId" ],
          "Destructure": [],
          "Properties": {
              "Application": "Menu API"
          }
      },
      "AllowedHosts": "*",
      "CosmosDb": {
          "DatabaseAccountUri": "${cosmosdb_endpoint}",
          "DatabaseName": "${cosmosdb_name}",
          "SecurityKeySecret": {
              "Identifier": "COSMOSDB_KEY",
              "Source": "Environment"
          }
      },
      "TestConfig": "Test value from file",
      "Values": {
        "Items": [
          "Item A from config",
          "Item B from congig",
          "Item C from config"
        ]
      }
    }

---

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  annotations:
    app.kubernetes.io/instance: ${project}-${app_name}
    app.kubernetes.io/version: ${version}
    applicationId: ${project}/${app_name}
    applicationName: ${project}-${app_name}
    customerID: ${company}
    owner: ${company}/${project}
    projectID: ${project}
    version: ${version}
  labels:
    aadpodidbinding: ${aadpodidentitybinding}
    app.kubernetes.io/component: ${component}
    app.kubernetes.io/name: ${resource_def_name}
    app.kubernetes.io/part-of: ${project}
    environment: ${environment}
  name: ${resource_def_name}
  namespace: ${namespace}
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: ${component}
      app.kubernetes.io/name: ${resource_def_name}
      app.kubernetes.io/part-of: ${project}
      environment: ${environment}
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      annotations:
        app.kubernetes.io/version: ${version}
        applicationId: ${project}/${app_name}
        applicationName: ${project}-${app_name}
        customerID: ${company}
        owner: ${company}/${project}
        projectID: ${project}
        role: api
        version: ${version}
      labels:
        aadpodidbinding: ${aadpodidentitybinding}
        app.kubernetes.io/component: ${component}
        app.kubernetes.io/name: ${resource_def_name}
        app.kubernetes.io/part-of: ${project}
        environment: ${environment}
    spec:
      dnsPolicy: ClusterFirst
      containers:
        - name: api
          # this we need to pass from the pipeline to the deployment steps
          image: ${k8s_image}
          imagePullPolicy: IfNotPresent
          volumeMounts:
          - name: appsettings
            # this can either be configured if you are re-using this for many services or should be changed here
            mountPath: /app/config
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: ENVIRONMENT
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['environment']
            - name: VERSION
              valueFrom:
                fieldRef:
                  fieldPath: metadata.annotations['version']
            - name: RELEASE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.annotations['release']
            - name: API_BASEPATH
              value: ${k8s_app_path}
            - name: COSMOSDB_KEY
              valueFrom:
                secretKeyRef:
                  name: appsecrets
                  key: cosmos_key
            - name: LOG_LEVEL
              value: debug
            - name: APPINSIGHTS_INSTRUMENTATIONKEY
              valueFrom:
                secretKeyRef:
                  name: appsecrets
                  key: app_insights

          ports:
            - name: http
              containerPort: 80
          livenessProbe:
            failureThreshold: 10
            httpGet:
              path: /health
              port: 80
              scheme: HTTP
            initialDelaySeconds: 45
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 25
          readinessProbe:
            failureThreshold: 10
            httpGet:
              path: /health
              port: 80
              scheme: HTTP
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 25
      volumes:
        - name: appsettings
          configMap:
            name: appsettings
