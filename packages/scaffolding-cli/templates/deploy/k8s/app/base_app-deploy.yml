apiVersion: v1
kind: Namespace
metadata:
  name: ${namespace}
  labels:
    app.kubernetes.io/component: ${component}
    app.kubernetes.io/name: ${resource_def_name}
    app.kubernetes.io/part-of: ${project}

---

apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  annotations:
    app.kubernetes.io/instance: ${project}-${app_name}
    app.kubernetes.io/version: ${version}
    applicationId: ${project}/${app_name}
    applicationName: ${project}-${app_name}
    customerID: ${company}
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/force-ssl-redirect: "false"
    nginx.ingress.kubernetes.io/rewrite-target: /$$2
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    owner: ${company}/${project}
    projectID: ${project}
    version: ${version}
  labels:
    app.kubernetes.io/component: ${component}
    app.kubernetes.io/name: ${resource_def_name}
    app.kubernetes.io/part-of: ${project}
    environment: ${environment}
  name: ${resource_def_name}
  namespace: ${namespace}
spec:
  rules:
  - host: ${dns_pointer}
    http:
      paths:
      - backend:
          serviceName: ${resource_def_name}
          servicePort: 80
        path: ${k8s_app_path:=''}(/|$)(.*)
  tls:
  - hosts:
    - ${tls_domain}

---

apiVersion: v1
kind: Service
metadata:
  annotations:
    app.kubernetes.io/instance: ${project}-${app_name}
    app.kubernetes.io/version: ${version}
    applicationId: ${project}/${app_name}
    applicationName: ${project}-${app_name}
    customerID: ${company}
    owner: ${company}/${project}
    projectID: ${project}
    version: ${version}
  labels:
    app.kubernetes.io/component: ${component}
    app.kubernetes.io/name: ${resource_def_name}
    app.kubernetes.io/part-of: ${project}
    environment: ${environment}
  name: ${resource_def_name}
  namespace: ${namespace}
spec:
  type: ClusterIP
  ports:
  - port: 80
    protocol: TCP
    targetPort: http
  selector:
    app.kubernetes.io/component: ${component}
    app.kubernetes.io/name: ${resource_def_name}
    app.kubernetes.io/part-of: ${project}
    environment: ${environment}
  sessionAffinity: None

---

apiVersion: v1
kind: Secret
metadata:
  name: appsecrets
  namespace: ${namespace}
type: Opaque
stringData:
  app_insights: ${app_insights_key}
  next_public_token: ${next_public_token}
  next_space_id: ${next_space_id}
  auth_client_secret: ${auth_client_secret}
---

apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    app.kubernetes.io/instance: ${project}-${app_name}
    app.kubernetes.io/version: ${version}
    applicationId: ${project}/${app_name}
    applicationName: ${project}-${app_name}
    customerID: ${company}
    owner: ${company}/${project}
    projectID: ${project}
    version: ${version}
  labels:
    aadpodidbinding: ${aadpodidentitybinding}
    app.kubernetes.io/component: ${component}
    app.kubernetes.io/name: ${resource_def_name}
    app.kubernetes.io/part-of: ${project}
    environment: ${environment}
  name: ${resource_def_name}
  namespace: ${namespace}
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/component: ${component}
      app.kubernetes.io/name: ${resource_def_name}
      app.kubernetes.io/part-of: ${project}
      environment: ${environment}
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      annotations:
        app.kubernetes.io/version: ${version}
        applicationId: ${project}/${app_name}
        applicationName: ${project}-${app_name}
        customerID: ${company}
        owner: ${company}/${project}
        projectID: ${project}
        role: web
        version: ${version}
      labels:
        aadpodidbinding: ${aadpodidentitybinding}
        app.kubernetes.io/component: ${component}
        app.kubernetes.io/name: ${resource_def_name}
        app.kubernetes.io/part-of: ${project}
        environment: ${environment}
    spec:
      dnsPolicy: ClusterFirst
      containers:
        - name: web
          # this we need to pass from the pipeline to the deployment steps
          image: ${k8s_image}
          imagePullPolicy: IfNotPresent
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: NODE_ENV
              value: production
            - name: LOG_LEVEL
              value: debug
            - name: PORT
              value: '3000'
            - name: MENU_API_URL
              value: ${api_url}
            - name: APP_BASE_PATH
              value: ${k8s_app_path:=''}
            - name: APP_BASE_URL
              value: https://${dns_pointer}
            - name: AUTH0_DOMAIN
              value: ${auth_domain}
            - name: AUTH0_CLIENT_ID
              value: ${auth_client_id}
            - name: REDIS_HOST
              value: "${redis_host}"
            - name: REDIS_PORT
              value: "${redis_port}"
            - name: REDIS_ENABLED
              value: "${redis_enabled}"
            - name: APPINSIGHTS_INSTRUMENTATIONKEY
              valueFrom:
                secretKeyRef:
                  name: appsecrets
                  key: app_insights
            - name: NEXT_PUBLIC_CONTENTFUL_ACCESS_TOKEN
              valueFrom:
                secretKeyRef:
                  name: appsecrets
                  key: next_public_token
            - name: NEXT_PUBLIC_CONTENTFUL_SPACE_ID
              valueFrom:
                secretKeyRef:
                  name: appsecrets
                  key: next_space_id
            - name: AUTH0_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: appsecrets
                  key: auth_client_secret

          # # Remove limits and let the Pods container get the default (800cpu)
          # resources:
          #   limits:
          #     cpu: 600m
          #     memory: 500Mi
          #   requests:
          #     cpu: 400m
          #     memory: 350Mi

          ports:
            - name: http
              containerPort: 3000
          livenessProbe:
            failureThreshold: 10
            httpGet:
              path: /healthz
              port: 3000
              scheme: HTTP
              httpHeaders:
              - name: stacks-k8s-probe
                value: live
            initialDelaySeconds: 45
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 25
          readinessProbe:
            failureThreshold: 10
            httpGet:
              path: /healthz
              port: 3000
              scheme: HTTP
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 25
