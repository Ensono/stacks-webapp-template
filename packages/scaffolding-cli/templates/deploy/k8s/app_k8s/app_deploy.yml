apiVersion: v1
kind: Namespace
metadata:
  name: dev-stacks-web-app

---

apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: stacks-webapp
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/rewrite-target: /$2
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "false"
spec:
  rules:
  - host: "app.nonprod.amidostacks.com"
    http:
      paths:
      - path: /web/stacks(/|$)(.*)
        backend:
          serviceName: stacks-webapp
          servicePort: 3000

---

apiVersion: v1
kind: Service
metadata:
  name: stacks-webapp
  labels:
    app.kubernetes.io/name: stacks-webapp
    app.kubernetes.io/component: web
    app.kubernetes.io/part-of: stacks
spec:
  type: ClusterIP
  ports:
  - port: 80
    protocol: TCP
    targetPort: http
  selector:
    app.kubernetes.io/name: stacks-webapp
    app.kubernetes.io/component: web
    app.kubernetes.io/part-of: stacks

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: stacks-webapp
  labels:
    app.kubernetes.io/name: stacks-webapp
    app.kubernetes.io/component: web
    app.kubernetes.io/part-of: stacks
    app.kubernetes.io/version: 0.0.248-1684
    applicationName: stacks-webapp
    customerID: amido
    owner: amido-stacks
    projectID: stacks
    role: web
    stage: devel
    tier: frontend
    version: 0.0.248-1684
  namespace: dev-stacks-web-app
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: stacks-webapp
      app.kubernetes.io/component: web
      app.kubernetes.io/part-of: stacks
  template:
    metadata:
      labels:
        aadpodidbinding: stacks-webapp-identity
        app.kubernetes.io/name: stacks-webapp
        app.kubernetes.io/component: web
        app.kubernetes.io/part-of: stacks
    spec:
      containers:
        - name: web
          # this we need to pass from the pipeline to the deployment steps
          image: amidostacksnonprodnode.azurecr.io/stacks-webapp:0.0.248-1684
          imagePullPolicy: IfNotPresent
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: NODE_ENV
              value: production
            - name: LOG_LEVEL
              value: debug
            - name: PORT
              value: '3000'
            - name: MENU_API_URL
              value: 'http://dev.amidostacks.com/api/menu'
            - name: APP_BASE_PATH
              value: '/web/stacks'
            - name: APP_BASE_URL
              value: 'http://localhost'

            - name: APPINSIGHTS_INSTRUMENTATIONKEY
              value: b53e0182-a2a2-4158-bea6-c1e23c819222
              # valueFrom:
              #   secretKeyRef:
              #     name: appinsights
              #     key: INSTRUMENTATIONKEY

          # # Remove limits and let the Pods container get the default (800cpu)
          # resources:
          #   limits:
          #     cpu: 600m
          #     memory: 500Mi
          #   requests:
          #     cpu: 400m
          #     memory: 350Mi

          ports:
            - name: http
              containerPort: 3000
          livenessProbe:
            failureThreshold: 10
            httpGet:
              path: /healthz
              port: 3000
              scheme: HTTP
              httpHeaders:
              - name: stacks-k8s-probe
                value: live
            initialDelaySeconds: 45
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 25
          readinessProbe:
            failureThreshold: 10
            httpGet:
              path: /healthz
              port: 3000
              scheme: HTTP
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 25
